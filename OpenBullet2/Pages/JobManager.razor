@page "/jobs"
@using RuriLib.Models.Jobs
@using RuriLib.Models.Data.DataPools
@inject Microsoft.Extensions.Localization.IStringLocalizer<JobManager> Loc
@attribute [Authorize(Roles = "Admin,Guest")]

<div class="container-fluid">
    <div class="row mb-2">
        <div class="list-group list-group-horizontal">
            <button class="btn btn-sm btn-outline-success" @onclick="NewJob"><span class="oi oi-plus"></span> @Loc["New"]</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="RemoveAll"><span class="oi oi-x"></span> @Loc["RemoveAll"]</button>
        </div>
    </div>
    @foreach (var job in Manager.Jobs.Where(j => CanSeeJob(j.OwnerId)).OrderBy(j => j.Id))
    {
        <div class="row mt-sm-2 mt-3">
            <div class="col-sm-auto job-overview-left-col d-flex align-items-center">
                <span>#@job.Id  [@job.Status]</span>
            </div>
            <div class="col-sm align-self-stretch pl-0 job-overview-mid-col d-flex align-items-center" @onclick="@(() => SelectJob(job))">
                <div class="job-overview px-2">
                    @if (job.OwnerId != 0 && guests.ContainsKey(job.OwnerId))
                    {
                        <span>
                            <b>@Loc["Owner"]: </b> @guests[job.OwnerId]
                        </span>
                    }
                    @switch (job)
                    {
                        case MultiRunJob x:
                            <span>
                                @if (x.Config != null)
                                {
                                    <b>@Loc["Config"]: </b>@x.Config.Metadata.Name
                                }
                                else
                                {
                                    @Loc["NoConfigSelected"]
                                }
                            </span>
                            <span>
                                <b>@Loc["DataPool"]: </b>
                                @switch (x.DataPool)
                                {
                                    case WordlistDataPool p:
                                        @(p.Wordlist.Name + $" ({Loc["Wordlist"]})") 
                                        break;

                                    case CombinationsDataPool p:
                                        @Loc["Combinations"]
                                        break;

                                    case InfiniteDataPool p:
                                        @Loc["Infinite"]
                                        break;

                                    case RangeDataPool p:
                                        @Loc["Range"]
                                        break;

                                    case FileDataPool p:
                                        @(p.FileName + Loc["File"])
                                        break;
                                }
                            </span>
                            <span><b>@Loc["Bots"]: </b>@x.Bots</span>
                            <span><b>@Loc["Proxies"]: </b>@x.ProxyMode</span>
                            <span class="fg-hit"><b>@Loc["Hits"]: </b>@x.DataHits</span>
                            <span class="fg-custom"><b>@Loc["Custom"]: </b>@x.DataCustom</span>
                            <span class="fg-tocheck"><b>@Loc["ToCheck"]: </b>@x.DataToCheck</span>
                            <span><b>@Loc["Progress"]: </b>@(x.Status == JobStatus.Idle ? x.Skip : x.DataTested + x.Skip) / @x.DataPool.Size (@((x.Progress == -1 ? 0 : x.Progress * 100).ToString("0.00"))%)</span>
                            <span><b>@Loc["CPM"]: </b>@x.CPM</span>
                            break;

                        case ProxyCheckJob x:
                            <span><b>@Loc["Bots"]: </b>@x.Bots</span>
                            <span class="fg-hit"><b>@Loc["Working"]: </b>@x.Working</span>
                            <span class="fg-fail"><b>@Loc["NotWorking"]: </b>@x.NotWorking</span>
                            <span><b>@Loc["Progress"]: </b>@x.Tested / @x.Total (@((x.Progress == -1 ? 0 : x.Progress * 100).ToString("0.00"))%)</span>
                            <span><b>@Loc["CPM"]: </b>@x.CPM</span>
                            break;
                    }
                </div>
            </div>
            <div class="col-sm-auto d-flex justify-content-around">
                <button class="btn btn-outline-primary w-100" @onclick="(() => Edit(job))" @onclick:stopPropagation="true" title="@Loc["Edit"]">
                    <span class="oi oi-pencil"></span>
                </button>
                <button class="btn btn-outline-primary ml-1 w-100" @onclick="(() => Clone(job))" @onclick:stopPropagation="true" title="@Loc["Clone"]">
                    <span class="oi oi-layers"></span>
                </button>
                <button class="btn btn-outline-danger ml-1 w-100" @onclick="(() => Remove(job))" @onclick:stopPropagation="true" title="@Loc["Remove"]">
                    <span class="oi oi-x"></span>
                </button>
            </div>
        </div>
    }
</div>

<hr />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02 }" />
<br /><br />

@code {
    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
} 