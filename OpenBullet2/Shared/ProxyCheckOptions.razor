@using OpenBullet2.Core.Models.Jobs
@using RuriLib.Services
@using OpenBullet2.Core.Entities
@using OpenBullet2.Services
@using OpenBullet2.Auth
@using OpenBullet2.Core.Models.Settings 
@inject RuriLibSettingsService RuriLibSettings
@inject IProxyGroupRepository ProxyGroupRepo
@inject AuthenticationStateProvider Auth
@inject OpenBulletSettingsService OBSettingsService
@inject Microsoft.Extensions.Localization.IStringLocalizer<ProxyCheckOptions> Loc

<label style="color: orange;">@Loc["StartCondition"]</label>
<br />
<div style="margin-bottom: 20px;">
    <StartConditionSelector @bind-StartCondition="Options.StartCondition" />
</div>

<EditForm Model="Options">
    <div style="width: 100px;">
        <label style="margin-top: 15px;">@Loc["Bots"]</label>
        <InputNumber TValue="int" Value="Options.Bots" ValueExpression="() => Options.Bots"
                     ValueChanged="(value) => Options.Bots = Math.Clamp(value, 1, 200)" />
    </div>
    <label>@Loc["TimeoutMilliseconds"]</label>
    <div style="width: 100px;">
        <InputNumber @bind-Value="Options.TimeoutMilliseconds" />
    </div>
    <label>@Loc["ProxyGroup"]</label>
    <InputSelectNumber T="int" @bind-Value="Options.GroupId">
        <option value="-1">@Loc["All"]</option>
        @foreach (var group in groups)
        {
            <option value="@group.Id">@group.Name</option>
        }
    </InputSelectNumber>
    <br />
    <label style="margin-top: 15px;">@Loc["CheckOnlyUntested"]</label>
    <InputCheckbox @bind-Value="Options.CheckOnlyUntested" />
    <br />
    <label style="margin-top: 15px;">@Loc["CheckOnWebsite"]</label>
    <InputSelectNumber T="int" Value="selectedTarget"
                 ValueExpression="() => selectedTarget"
                 ValueChanged="i => { Options.Target = targets[i]; selectedTarget = i; }">
        @for (int i = 0; i < targets.Count; i++)
        {
            <option value="@i">@targets[i].Url | @targets[i].SuccessKey</option>
        } 
    </InputSelectNumber>
</EditForm>

@code {
    [Parameter] public ProxyCheckJobOptions Options { get; set; }
    private List<ProxyGroupEntity> groups = new();
    private int uid = -1;
    private List<ProxyCheckTarget> targets = new();
    private int selectedTarget = 0;

    protected override async Task OnInitializedAsync()
    {
        uid = await ((OBAuthenticationStateProvider)Auth).GetCurrentUserId();

        groups = uid == 0
            ? await ProxyGroupRepo.GetAll().ToListAsync()
            : await ProxyGroupRepo.GetAll().Include(g => g.Owner).Where(g => g.Owner.Id == uid).ToListAsync();

        targets = OBSettingsService.Settings.GeneralSettings.ProxyCheckTargets ?? new();

        if (targets.Count == 0)
        {
            targets.Add(new());
        }

        if (Options.Target is null)
        {
            Options.Target = targets[0];
        }
    }
}