@using RuriLib.Models.Blocks.Custom
@using RuriLib.Models.Blocks.Custom.Parse
@inject Microsoft.Extensions.Localization.IStringLocalizer<ParseBlockSettingsViewer> Loc

<EditForm Model="Block">
    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />
    <label>@Loc["SafeMode"]</label>
    <InputCheckbox @bind-Value="Block.Safe" />
</EditForm>

<EditForm Model="Block">
    <h6 class="font-weight-bold fg-custom" style="margin-top: 20px;">@Loc["OutputVariable"] (@(Block.Recursive ? "ListOfStrings" : "String")):</h6>
    <InputText @bind-Value="Block.OutputVariable" />
    <label>@Loc["IsCapture"]</label>
    <InputCheckbox @bind-Value="Block.IsCapture" />
    <br />
    <label>@Loc["Recursive"]</label>
    <InputCheckbox @bind-Value="Block.Recursive" />
</EditForm>

<h6 class="font-weight-bold fg-custom" style="margin-top: 20px;">@Loc["Settings"]:</h6>

<BlockInputField BlockSetting="@Block.Settings["input"]" />
<BlockInputField BlockSetting="@Block.Settings["prefix"]" />
<BlockInputField BlockSetting="@Block.Settings["suffix"]" />
<BlockInputField BlockSetting="@Block.Settings["urlEncodeOutput"]" />
<hr />

<RadzenRadioButtonList @bind-Value="Block.Mode" TValue="ParseMode">
    <Items>
        <RadzenRadioButtonListItem Text="LR" Value="ParseMode.LR" />
        <RadzenRadioButtonListItem Text="CSS" Value="ParseMode.CSS" />
        <RadzenRadioButtonListItem Text="XPath" Value="ParseMode.XPath" />
        <RadzenRadioButtonListItem Text="Json" Value="ParseMode.Json" />
        <RadzenRadioButtonListItem Text="Regex" Value="ParseMode.Regex" />
    </Items>
</RadzenRadioButtonList>
<br />

<EditForm Model="Block">
    @switch (Block.Mode)
    {
        case ParseMode.LR:
            <BlockInputField BlockSetting="@Block.Settings["leftDelim"]" />
            <BlockInputField BlockSetting="@Block.Settings["rightDelim"]" />
            <BlockInputField BlockSetting="@Block.Settings["caseSensitive"]" />
            break;

        case ParseMode.CSS:
            <BlockInputField BlockSetting="@Block.Settings["cssSelector"]" />
            <BlockInputField BlockSetting="@Block.Settings["attributeName"]" />
            break;

        case ParseMode.XPath:
            <BlockInputField BlockSetting="@Block.Settings["xPath"]" />
            <BlockInputField BlockSetting="@Block.Settings["attributeName"]" />
            break;

        case ParseMode.Json:
            <BlockInputField BlockSetting="@Block.Settings["jToken"]" />
            break;

        case ParseMode.Regex:
            <BlockInputField BlockSetting="@Block.Settings["pattern"]" />
            <BlockInputField BlockSetting="@Block.Settings["outputFormat"]" />
            <BlockInputField BlockSetting="@Block.Settings["multiLine"]" />
            break;
    }
</EditForm>

<br />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02, help1x03, help1x04 }" />

@code {
    [Parameter] public ParseBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }

    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
    private string help1x03 => Loc["Help1x03"];
    private string help1x04 => Loc["Help1x04"];
}
