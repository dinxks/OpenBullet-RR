@using RuriLib.Models.Blocks.Settings
@using RuriLib.Models.Blocks.Custom.Keycheck
@using RuriLib.Services
@inject RuriLibSettingsService RuriLibSettings 

<div class="container pt-2 px-1"
     style="border: 5px solid @GetColor(); border-radius: 5px;">
    <div class="row">
        <div class="col-auto">
            <EditForm Model="Keychain">
                <label>Result Status:</label>
                <InputSelect @bind-Value="Keychain.ResultStatus">
                    @foreach (var status in RuriLibSettings.GetStatuses())
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </EditForm>
        </div>
        <div class="col-auto mr-0 pr-0 ml-0 pl-0">
            <EditForm Model="Keychain">
                <label class="ml-3">Mode:</label>
                <InputSelect @bind-Value="Keychain.Mode">
                    @foreach (var mode in Enum.GetNames(typeof(KeychainMode)))
                    {
                        <option value="@mode">@mode</option>
                    }
                </InputSelect>
            </EditForm>
        </div>
        <div class="col align-self-stretch ml-0 pl-0 text-right">
            @Buttons
        </div>
    </div>
    <div class="row my-3">
        <div class="col">
            <div class="list-group list-group-horizontal">
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new StringKey()))"><span class="oi oi-plus"></span> String</button>
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new BoolKey()))"><span class="oi oi-plus"></span> Bool</button>
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new IntKey()))"><span class="oi oi-plus"></span> Int</button>
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new FloatKey()))"><span class="oi oi-plus"></span> Float</button>
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new ListKey()))"><span class="oi oi-plus"></span> List</button>
                <button class="btn btn-sm btn-outline-success" @onclick="(() => Keychain.Keys.Add(new DictionaryKey()))"><span class="oi oi-plus"></span> Dictionary</button>
            </div>
        </div>
    </div>
    @foreach (var key in Keychain.Keys)
    {
        <div class="row">
            @switch (key)
            {
                case StringKey x:
                    <KeycheckStringKey Key="x" />
                    break;

                case BoolKey x:
                    <KeycheckBoolKey Key="x" />
                    break;

                case IntKey x:
                    <KeycheckIntKey Key="x" />
                    break;

                case FloatKey x:
                    <KeycheckFloatKey Key="x" />
                    break;

                case ListKey x:
                    <KeycheckListKey Key="x" />
                    break;

                case DictionaryKey x:
                    <KeycheckDictionaryKey Key="x" />
                    break;
            }
            <div class="col-auto text-right">
                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(() => Keychain.Keys.Remove(key))">
                <span class="oi oi-x"></span></button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Keychain Keychain { get; set; }
    [Parameter] public RenderFragment Buttons { get; set; }

    private string GetColor()
    {
        return Keychain.ResultStatus switch
        {
            "SUCCESS" => "yellowgreen",
            "FAIL" => "tomato",
            "RETRY" => "yellow",
            "BAN" => "plum",
            "NONE" => "skyblue",
            _ => "orange"
        };
    }
}
