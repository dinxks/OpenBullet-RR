@inject MemoryJobLogger JobLoggerService
@implements IDisposable

<div class="generic-log">
    @foreach (var entry in entries)
    {
        <span style="color: @entry.color;">[@entry.date.ToLongTimeString()] @entry.message.Replace("\r\n", " ").Replace("\n", " ")</span><br />
    }
</div>

@code {
    [Parameter] public int JobId { get; set; } = 0;
    private JobLogEntry[] entries = Array.Empty<JobLogEntry>();

    protected override void OnInitialized()
    {
        JobLoggerService.NewLog += OnNewLog;
    }

    private void OnNewLog(object sender, int id)
    {
        if (id != JobId)
            return;

        entries = JobLoggerService.GetLog(id).Reverse().ToArray();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        JobLoggerService.NewLog -= OnNewLog;
    }
}
