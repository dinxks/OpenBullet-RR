@using RuriLib.Models.Jobs.StartConditions 
@inject Microsoft.Extensions.Localization.IStringLocalizer<StartConditionSelector> Loc

<RadzenRadioButtonList @bind-Value="type" TValue="StartConditionType" Change="@((args) => Change(args))">
    <Items>
        <RadzenRadioButtonListItem Text="@Loc["StartIn"]" Value="StartConditionType.StartIn" />
        <RadzenRadioButtonListItem Text="@Loc["StartAt"]" Value="StartConditionType.StartAt" />
    </Items>
</RadzenRadioButtonList>

<br />

<EditForm Model="StartCondition">
    @switch (StartCondition)
    {
        case RelativeTimeStartCondition x:
            <RelativeTimeStartConditionEditor StartCondition="x" />
            break;

        case AbsoluteTimeStartCondition x:
                <RadzenDatePicker TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5" SecondsStep="10" 
                      Change="@(args => AbsoluteChange(x, args))" @bind-Value="dateTime" DateFormat="MM/dd/yyyy HH:mm:ss" />
            break;
    }
</EditForm>

    @code {
    [Parameter] public StartCondition StartCondition { get; set; }
    [Parameter] public EventCallback<StartCondition> StartConditionChanged { get; set; }

    private StartConditionType type = StartConditionType.StartIn;
    private DateTime? dateTime = DateTime.Now;

    enum StartConditionType
    {
        StartIn,
        StartAt
    }

    protected override void OnParametersSet()
    {
        type = GetCurrentType();
    }

    private void Change(StartConditionType? value)
    {
        if (value.HasValue)
        {
            StartCondition = value.Value switch
            {
                StartConditionType.StartIn => new RelativeTimeStartCondition(),
                StartConditionType.StartAt => new AbsoluteTimeStartCondition(),
                _ => throw new NotImplementedException()
            };

            StartConditionChanged.InvokeAsync(StartCondition);
        }
    }

    private StartConditionType GetCurrentType()
    {
        return StartCondition switch
        {
            RelativeTimeStartCondition _ => StartConditionType.StartIn,
            AbsoluteTimeStartCondition _ => StartConditionType.StartAt,
            _ => throw new NotImplementedException()
        };
    }

    private void AbsoluteChange(AbsoluteTimeStartCondition condition, DateTime? value)
    {
        if (value.HasValue)
        {
            condition.StartAt = value.Value;
        }
    }
}
