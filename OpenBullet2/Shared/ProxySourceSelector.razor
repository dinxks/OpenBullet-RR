@using OpenBullet2.Core.Models.Proxies
@using OpenBullet2.Core.Entities 
@using OpenBullet2.Auth 
@inject IProxyGroupRepository ProxyGroupRepo
@inject AuthenticationStateProvider Auth
@inject Microsoft.Extensions.Localization.IStringLocalizer<ProxySourceSelector> Loc

<div class="container-fluid">

    <div class="row mb-3">
        <div class="list-group list-group-horizontal">
            <button class="btn btn-sm btn-outline-primary" @onclick="AddGroup">
                <span class="oi oi-plus"></span> @Loc["Group"]
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="AddFile">
                <span class="oi oi-plus"></span> @Loc["File"]
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="AddRemote">
                <span class="oi oi-plus"></span> @Loc["Remote"]
            </button>
        </div>
    </div>

    @foreach (var source in ProxySources)
    {
        
        <EditForm Model="source">
            <div class="row mb-3" style="min-height: 20px; line-height: 20px;">
                @switch (source)
                {
                    case GroupProxySourceOptions x:
                        <div class="col-auto">
                            <label class="fg-tocheck">@Loc["Group"]</label>
                        </div>
                        <div class="col align-self-stretch">
                            <InputSelectNumber T="int" @bind-Value="x.GroupId">
                                <option value="-1">@Loc["All"]</option>
                                @foreach (var group in groups)
                                {
                                    <option value="@group.Id">@group.Name</option>
                                }
                            </InputSelectNumber>
                        </div>
                        break;

                    case FileProxySourceOptions x:
                        <div class="col-auto">
                            <label class="fg-hit">@Loc["FileName"]</label>
                        </div>
                        <div class="col align-self-stretch">
                            <InputText @bind-Value="x.FileName" />
                        </div>
                        <div class="col-auto">
                            <InputSelect @bind-Value="x.DefaultType">
                                @foreach (var type in Enum.GetNames(typeof(RuriLib.Models.Proxies.ProxyType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>
                        break;

                    case RemoteProxySourceOptions x:
                        <div class="col-auto">
                            <label class="fg-retry">@Loc["Url"]</label>
                        </div>
                        <div class="col align-self-stretch">
                            <InputText @bind-Value="x.Url" />
                        </div>
                        <div class="col-auto">
                            <InputSelect @bind-Value="x.DefaultType">
                                @foreach (var type in Enum.GetNames(typeof(RuriLib.Models.Proxies.ProxyType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>
                        break;
                }
                <div class="col-auto">
                    <button class="btn btn-sm btn-outline-danger" @onclick="(() => ProxySources.Remove(source))">
                        <span class="oi oi-x"></span></button>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public List<ProxySourceOptions> ProxySources { get; set; }
    private List<ProxyGroupEntity> groups = new();
    private int uid = -1;

    protected override async Task OnInitializedAsync()
    {
        uid = await ((OBAuthenticationStateProvider)Auth).GetCurrentUserId();

        groups = uid == 0
            ? await ProxyGroupRepo.GetAll().ToListAsync()
            : await ProxyGroupRepo.GetAll().Include(g => g.Owner).Where(g => g.Owner.Id == uid).ToListAsync();
    }

    private void AddGroup()
    {
        ProxySources.Add(new GroupProxySourceOptions());
    }

    private void AddFile()
    {
        ProxySources.Add(new FileProxySourceOptions());
    }

    private void AddRemote()
    {
        ProxySources.Add(new RemoteProxySourceOptions());
    }
}
