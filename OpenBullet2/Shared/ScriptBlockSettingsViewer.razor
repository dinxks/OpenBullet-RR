@using RuriLib.Models.Blocks.Custom
@using RuriLib.Models.Blocks.Custom.Script
@using RuriLib.Models.Variables
@inject OpenBulletSettingsService OBSettingsService 
@inject Microsoft.Extensions.Localization.IStringLocalizer<ScriptBlockSettingsViewer> Loc

<EditForm Model="Block">
    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />
</EditForm>

<h6 class="font-weight-bold fg-custom" style="margin-top: 20px;">@Loc["Settings"]:</h6>

<EditForm Model="Block">
    <label>@Loc["InputVariables"]</label>
    <InputText @bind-Value="Block.InputVariables" />
    <label>@Loc["Interpreter"]</label>
    <InputSelect @bind-Value="Block.Interpreter">
        @foreach (var type in Enum.GetNames(typeof(Interpreter)))
        {
            <option value="@type">@type</option>
        }
    </InputSelect>
    <br />
    <p>@Loc["OutputVariables"]</p>
    <div class="list-group list-group-horizontal">
        <button type="button" class="btn btn-sm btn-outline-success"
                @onclick="@(() => Block.OutputVariables.Add(new OutputVariable()))">
            <span class="oi oi-plus"></span> @Loc["Add"]
        </button>
        <button type="button" class="btn btn-sm btn-outline-danger"
                @onclick="@(() => Block.OutputVariables.Clear())">
            <span class="oi oi-x"></span> @Loc["Clear"]
        </button>
    </div>
    <div class="container-fluid" style="margin-top: 15px;">
        @foreach (var output in Block.OutputVariables)
        {
            <div class="row">
                <div class="col-auto px-1 px-md-2">
                    <label style="line-height: 30px;">@Loc["Type"]</label>
                </div>
                <div class="col-auto px-1 px-md-2">
                    <InputSelect @bind-Value="output.Type">
                        @foreach (var type in Enum.GetNames(typeof(VariableType)))
                            {
                            <option value="@type">@type</option>
                            }
                    </InputSelect>
                </div>
                <div class="col-auto px-1 px-md-2">
                    <label style="line-height: 30px;">@Loc["Name"]</label>
                </div>
                <div class="col align-self-stretch px-1 px-md-2">
                    <InputText @bind-Value="output.Name" />
                </div>
                <div class="col-auto px-1 px-md-2">
                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(() => Block.OutputVariables.Remove(output))">
                        <span class="oi oi-x"></span>
                    </button>
                </div>
            </div>
        }
    </div>
</EditForm>

<MonacoEditor @ref="_editor" Id="@id" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="SaveScript" />

<br />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02 }" />

@code {
    [Parameter] public ScriptBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }
    private MonacoEditor _editor { get; set; }
    private string id = $"js-editor-{(DateTime.UtcNow - DateTime.UnixEpoch).TotalSeconds}";

    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _editor.SetValue(Block.Script);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Minimap = new EditorMinimapOptions { Enabled = false },
            Theme = OBSettingsService.Settings.CustomizationSettings.MonacoTheme,
            Language = GetLanguage(Block.Interpreter),
            Value = Block.Script,
            MatchBrackets = true,
            WordWrap = OBSettingsService.Settings.CustomizationSettings.WordWrap ? "on" : "off"
        };
    }

    private async Task SaveScript()
    {
        Block.Script = await _editor.GetValue();
    }

    private string GetLanguage(Interpreter interpreter)
    {
        return interpreter switch
        {
            Interpreter.Jint => "javascript",
            Interpreter.NodeJS => "javascript",
            Interpreter.IronPython => "python",
            _ => "cpp"
        };
    }
}
