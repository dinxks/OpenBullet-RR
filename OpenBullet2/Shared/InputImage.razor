@using OpenBullet2.Core.Helpers
@using OpenBullet2.Helpers 
@using System.IO
@inject Microsoft.Extensions.Localization.IStringLocalizer<InputImage> Loc

<div class="container-fluid">
    <div class="row">
        <label>@Loc["FromUrl"]:</label>
        <div class="col align-self-stretch">
            <EditForm Model="imageUrl">
                <InputText @bind-Value="imageUrl" />
            </EditForm>
        </div>
        <div class="col-auto">
            <button class="btn btn-sm btn-success" @onclick="FromUrl">@Loc["Ok"]</button>
        </div>
    </div>
    <div class="row">
        <label>@Loc["FromFile"]:</label>
        <div class="col">
            <InputFile OnChange="@HandleSelection" />
        </div>
    </div>
</div>

<div>
    @if (Base64 != null)
    {
        <div>
            <div style="margin: 10px; width: @(MaxWidth)px; height: @(MaxHeight)px;">
                <img src="data:image/png;base64,@Base64" style="height: 100%; width: 100%;" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Base64 { get; set; }
    [Parameter] public int MaxKilobytes { get; set; } = 100;
    [Parameter] public int MaxWidth { get; set; } = 110;
    [Parameter] public int MaxHeight { get; set; } = 110;
    [Parameter] public EventCallback<string> Base64Changed { get; set; }

    private string imageUrl = string.Empty;

    private async Task HandleSelection(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0)
            return;

        try
        {
            byte[] buffer = new byte[4 * 1024];

            using (var ms = new MemoryStream())
            {
                // Support maximum 5 MB for file upload
                await e.File.OpenReadStream(5 * 1000 * 1000).CopyToAsync(ms);
                var bytes = ImageEditor.ToCompatibleFormat(ms.ToArray());

                var resize = false;

                if (bytes.Length > MaxKilobytes * 1024)
                {
                    resize = await js.Confirm(Loc["ImageTooBig"],
                        $"{Loc["ImageTooBigText1"]} {MaxKilobytes}KB. {Loc["ImageTooBigText2"]}", Loc["No"]);
                }

                Base64 = Convert.ToBase64String(bytes);

                if (resize)
                    Base64 = ImageEditor.ResizeBase64(Base64, MaxWidth, MaxHeight);

                await Base64Changed.InvokeAsync(Base64);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await js.AlertException(ex);
        }
    }

    private async Task FromUrl()
    {
        try
        {
            using var client = new HttpClient();
            using var response = await client.GetAsync(imageUrl);
            var bytes = ImageEditor.ToCompatibleFormat(await response.Content.ReadAsByteArrayAsync());

            var resize = false;

            if (bytes.Length > MaxKilobytes * 1024)
            {
                resize = await js.Confirm(Loc["ImageTooBig"],
                    $"{Loc["ImageTooBigText1"]} {MaxKilobytes}KB. {Loc["ImageTooBigText2"]}", Loc["No"]);
            }

            Base64 = Convert.ToBase64String(bytes);

            if (resize)
                Base64 = ImageEditor.ResizeBase64(Base64, MaxWidth, MaxHeight);

            await Base64Changed.InvokeAsync(Base64);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await js.AlertException(ex);
        }
    }
}
