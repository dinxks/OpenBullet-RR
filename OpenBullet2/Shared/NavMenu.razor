@using OpenBullet2.Helpers
@using RuriLib.Models.Configs
@using System.Globalization
@using OpenBullet2.Repositories
@using OpenBullet2.Shared.Forms 
@using OpenBullet2.Auth
@inject IConfigRepository ConfigRepo
@inject UpdateService UpdateService
@inject NavigationManager NavigationManager 
@inject ConfigService ConfigService
@inject AuthenticationStateProvider Auth 
@inject IModalService Modal
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> Loc
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark" style="padding-left: 0.5rem !important;">
    <div class="container-fluid" style="margin-left: -5px;">
        <div class="logo" @onclick="NavigateToHome"></div>
        <div class="text-right d-none d-md-block" style="position: absolute; height: 20px; width: 20px; right: 15px;">
            <span class="oi oi-menu text-white" style="cursor: pointer;" @onclick="(() => ToggleSidebar())"></span>
        </div>
    </div>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column bg-secondary">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> @Loc["Home"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="jobs">
                <span class="oi oi-pulse" aria-hidden="true"></span> @Loc["Jobs"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="monitor">
                <span class="oi oi-eye" aria-hidden="true"></span> @Loc["Monitor"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="proxies/groups">
                <span class="oi oi-shield" aria-hidden="true"></span> @Loc["Proxies"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="wordlists">
                <span class="oi oi-align-left" aria-hidden="true"></span> @Loc["Wordlists"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="hits">
                <span class="oi oi-bolt" aria-hidden="true"></span> @Loc["Hits"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="configs">
                <span class="oi oi-cog" aria-hidden="true"></span> @Loc["Configs"]
            </NavLink>
        </li>
        @if (displayConfigSubmenu && isAdmin)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="config/edit/metadata">
                    <span class="oi oi-ellipses ml-4" aria-hidden="true"></span> @Loc["Metadata"]
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="config/edit/readme">
                    <span class="oi oi-pencil ml-4" aria-hidden="true"></span> @Loc["Readme"]
                </NavLink>
            </li>

            @if (displayStackerSubmenu)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="config/edit/stacker">
                        <span class="oi oi-menu ml-4" aria-hidden="true"></span> @Loc["Stacker"]
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="config/edit/lolicode">
                        <span class="oi oi-code ml-4" aria-hidden="true"></span> @Loc["LoliCode"]
                    </NavLink>
                </li>
            }

            <li class="nav-item px-3">
                <NavLink class="nav-link" href="config/edit/settings">
                    <span class="oi oi-wrench ml-4" aria-hidden="true"></span> @Loc["Settings"]
                </NavLink>
            </li>
            
            @if (displayCSharpSubmenu)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="config/edit/code">
                        <span class="oi oi-code ml-4" aria-hidden="true"></span> @Loc["CSharpCode"]
                    </NavLink>
                </li>
            }

            @if (displayLoliScriptSubmenu)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="config/edit/loliscript">
                        <span class="oi oi-code ml-4" aria-hidden="true"></span> @Loc["LoliScript"]
                    </NavLink>
                </li>
            }

            <li class="nav-item px-3" style="width: 100%;">
                <button type="button" class="btn btn-outline-success" style="width: 100%" @onclick="SaveConfig">
                    <span class="oi oi-task" aria-hidden="true" style="margin-top: 5px;"></span> @Loc["SaveConfig"]
                </button>
            </li>
        }

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="settings/rurilib">
                <span class="oi oi-wrench" aria-hidden="true"></span> @Loc["RLSettings"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="settings/openbullet">
                <span class="oi oi-wrench" aria-hidden="true"></span> @Loc["OBSettings"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="guests">
                <span class="oi oi-person" aria-hidden="true"></span> @Loc["Guests"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="plugins">
                <span class="oi oi-puzzle-piece" aria-hidden="true"></span> @Loc["Plugins"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="sharing">
                <span class="oi oi-share" aria-hidden="true"></span> @Loc["Sharing"]
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="about">
                <span class="oi oi-info" aria-hidden="true"></span> @Loc["About"]
            </NavLink>
        </li>
        @if (UpdateService.IsUpdateAvailable)
        {
            <li class="nav-item px-3" style="width: 100%;">
                <button type="button" class="btn btn-outline-warning" style="width: 100%" @onclick="ShowUpdateInstructions">
                    <span class="oi oi-warning" aria-hidden="true" style="margin-top: 5px;"></span> @Loc["UpdateAvailable"]
                </button>
            </li>
        }
        <li class="d-md-none text-center mb-3 footer-buttons">
            @if (isAdmin)
            {
                <img class="culture-flag-small" @onclick="ChangeLanguage" src="images/flags/@(CultureInfo.CurrentCulture.Name).png" />
            }
            <a href="https://discourse.openbullet.dev"><span class="oi oi-globe"></span></a>
            <a href="docs"><span class="oi oi-book"></span></a>
            <a href="https://github.com/openbullet/OpenBullet2/issues"><span class="oi oi-bug"></span></a>
            <span class="version-label ml-2" @onclick="ShowChangelog">@UpdateService.CurrentVersion [@UpdateService.CurrentVersionType]</span>
        </li>
    </ul>
</div>

<div class="navbar-footer float-left text-center d-none d-md-block">
    <div class="footer-buttons">
        @if (isAdmin)
        {
            <img class="culture-flag-small" style="margin-right: 5px;" @onclick="ChangeLanguage" src="images/flags/@(CultureInfo.CurrentCulture.Name).png" />
        }
        <a href="https://discourse.openbullet.dev"><span class="oi oi-globe"></span></a>
        <a href="docs"><span class="oi oi-book"></span></a>
        <a href="https://github.com/openbullet/OpenBullet2/issues"><span class="oi oi-bug"></span></a>
    </div>
    <span class="version-label" @onclick="ShowChangelog">@UpdateService.CurrentVersion [@UpdateService.CurrentVersionType]</span>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool displayConfigSubmenu = false;
    private bool displayStackerSubmenu = true;
    private bool displayCSharpSubmenu = true;
    private bool displayLoliScriptSubmenu = false;
    private bool sidebarExpanded = true;
    private bool isAdmin = false;
    private DotNetObjectReference<NavMenu> reference;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        var uid = await ((OBAuthenticationStateProvider)Auth).GetCurrentUserId();
        isAdmin = uid == 0;
        await InvokeAsync(StateHasChanged);

        try { ConfigService.OnConfigSelected -= OnConfigSelected; } catch { }

        ConfigService.OnConfigSelected += OnConfigSelected;
        OnConfigSelected(this, ConfigService.SelectedConfig);

        reference = DotNetObjectReference.Create(this);
        await js.InvokeVoidAsync("registerNavMenu", reference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uid = await ((OBAuthenticationStateProvider)Auth).GetCurrentUserId();

        // Only re-render if isAdmin has changed
        if (isAdmin != (uid == 0))
        {
            isAdmin = uid == 0;
            await InvokeAsync(StateHasChanged);   
        }
    }


    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;

        await js.InvokeVoidAsync("setSidebarWidth", "230px");
        await js.InvokeVoidAsync("setSidebarMargin", "0px");
        sidebarExpanded = true;
    }

    private async void OnConfigSelected(object sender, Config config)
    {
        displayConfigSubmenu = config != null;
        displayStackerSubmenu = config != null && config.Mode is not (ConfigMode.CSharp or ConfigMode.DLL or ConfigMode.Legacy);
        displayCSharpSubmenu = config != null && config.Mode is not (ConfigMode.DLL or ConfigMode.Legacy);
        displayLoliScriptSubmenu = config != null && config.Mode is ConfigMode.Legacy;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task SaveConfig()
    {
        if (ConfigService.SelectedConfig == null)
        {
            await js.AlertError(Loc["Uh-Oh"], Loc["NoConfigSelected"]);
            return;
        }

        // Check if the LoliCode is valid
        if (ConfigService.SelectedConfig.Mode == ConfigMode.LoliCode)
        {
            try
            {
                RuriLib.Helpers.Transpilers.Loli2StackTranspiler.Transpile(ConfigService.SelectedConfig.LoliCodeScript);
            }
            catch (Exception ex)
            {
                await js.AlertError(Loc["InvalidLolicode"], ex.Message);
                return;
            }
        }

        await ConfigRepo.Save(ConfigService.SelectedConfig);
        await js.AlertSuccess(Loc["AwwYeah"], $"{ConfigService.SelectedConfig.Metadata.Name} {Loc["wasSavedSuccessfully"]}");
    }

    private void ChangeLanguage()
    {
        Modal.Show<CultureSelector>(Loc["ChooseYourLanguage"]);
    }

    private void ShowUpdateInstructions()
    {
        Modal.Show<UpdateInstructions>(Loc["UpdateInstructions"]);
    }

    private void ShowChangelog()
    {
        Modal.Show<ChangelogViewer>(Loc["Changelog"]);
    }

    private async Task ToggleSidebar()
    {
        if (sidebarExpanded)
        {
            sidebarExpanded = false;
            await js.InvokeVoidAsync("setSidebarWidth", "260px");
            await js.InvokeVoidAsync("setSidebarMargin", "-230px");
        }
        else
        {
            sidebarExpanded = true;
            await js.InvokeVoidAsync("setSidebarWidth", "230px");
            await js.InvokeVoidAsync("setSidebarMargin", "0px");
        }
    }

    private void NavigateToHome() => NavigationManager.NavigateTo("/", true);

    public void Dispose()
        => reference?.Dispose();
}
