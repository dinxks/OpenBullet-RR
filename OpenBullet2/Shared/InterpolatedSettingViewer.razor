@using RuriLib.Models.Blocks.Settings
@using RuriLib.Models.Blocks.Settings.Interpolated 
@using RuriLib.Extensions

<EditForm Model="BlockSetting">
    <div style="text-align: left;">
        @switch (BlockSetting.InterpolatedSetting)
        {
            case InterpolatedStringSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        @if (x.MultiLine)
                        {
                            <InputTextArea class="bg-interpolated" @bind-Value="@x.Value" />
                        }
                        else
                        {
                            <InputText class="bg-interpolated" @bind-Value="@x.Value" />
                        }
                    </div>
                    <div class="col-auto mr-0 pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case InterpolatedListOfStringsSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-12">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputListOfStrings CssClass="bg-interpolated" @bind-List="x.Value" />
                    </div>
                    <div class="col-auto pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case InterpolatedDictionaryOfStringsSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-12">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputDictionaryOfStrings CssClass="bg-interpolated" @bind-Dictionary="x.Value" />
                    </div>
                    <div class="col-auto pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;
        }

    </div>
</EditForm>

@code {
    [Parameter] public BlockSetting BlockSetting { get; set; }
    [Parameter] public bool DisplayName { get; set; }
    [Parameter] public EventCallback<SettingInputMode> SwitchedMode { get; set; }
    public string Name => BlockSetting.ReadableName;
}
