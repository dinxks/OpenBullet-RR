@using RuriLib.Models.Jobs.Monitor.Triggers
@inject IModalService ModalService

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-6">
            <p>Generic</p>
            <div class="vertical-buttons-list" style="max-height: 500px; overflow-y: auto;">
                <ul>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new JobStatusTrigger())))">Job Status</button></li>
                </ul>
            </div>
        </div>
        <div class="col-sm-6">
            <p>MultiRunJob</p>
            <div class="vertical-buttons-list" style="max-height: 500px; overflow-y: auto;">
                <ul>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new JobFinishedTrigger())))">Job Finished</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new HitCountTrigger())))">Hit Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new CustomCountTrigger())))">Custom Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new ToCheckCountTrigger())))">ToCheck Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new FailCountTrigger())))">Fail Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new BanCountTrigger())))">Banned Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new ErrorCountTrigger())))">Error Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new RetryCountTrigger())))">Retry Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new TestedCountTrigger())))">Tested Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new AliveProxiesCountTrigger())))">Alive Proxies Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new BannedProxiesCountTrigger())))">Banned Proxies Count</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new CPMTrigger())))">CPM</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new CaptchaCreditTrigger())))">Captcha Credit</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new ProgressTrigger())))">Progress %</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new TimeElapsedTrigger())))">Time Elapsed</button></li>
                    <li><button class="btn btn-outline-primary" @onclick="@(() => BlazoredModal.Close(ModalResult.Ok(new TimeRemainingTrigger())))">Time Remaining</button></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code { 
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
}
