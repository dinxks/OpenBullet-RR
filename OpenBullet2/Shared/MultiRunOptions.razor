@using OpenBullet2.Core.Models.Jobs
@using RuriLib.Models.Jobs
@using RuriLib.Models.Proxies 
@using OpenBullet2.Shared.Forms
@using RuriLib.Models.Configs
@using RuriLib.Services
@inject RuriLibSettingsService RuriLibSettings
@inject IRecordRepository RecordRepo
@inject IModalService Modal
@inject ConfigService ConfigService
@inject JobFactoryService JobFactory
@inject Microsoft.Extensions.Localization.IStringLocalizer<MultiRunOptions> Loc

<div class="container-fluid px-0">
    <div class="row">
        <div class="col">
            <label class="fg-custom">@Loc["StartCondition"]</label>
            <div class="mb-3">
                <StartConditionSelector @bind-StartCondition="Options.StartCondition" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <EditForm Model="Options">
                <label class="fg-custom">@Loc["Config"]</label>
                @if (selectedConfig == null)
                {
                    <p>@Loc["NoConfigSelected"]</p>
                }
                else
                {
                    <div style="width: 55px; height: 55px;" class="my-3">
                        <img src="data:image/png;base64,@selectedConfig.Metadata.Base64Image" class="w-100 h-100" />
                    </div>
                    <p>@selectedConfig.Metadata.Name @Loc["by"] @selectedConfig.Metadata.Author</p>
                }
                <button class="btn btn-outline-primary mb-3" @onclick="SelectConfig">@Loc["SelectConfig"]</button>
                <br />
                <label>@Loc["Bots"]</label>
                <InputNumber style="max-width: 100px; display: inline;" TValue="int" Value="Options.Bots"
                    ValueExpression="() => Options.Bots" ValueChanged="(value) => Options.Bots = Math.Clamp(value, 1, JobFactory.BotLimit)" />
                <br />
                <label>@Loc["Skip"]</label>
                <InputNumber style="max-width: 100px; display: inline;" @bind-Value="Options.Skip" />
                <br />
                <label>@Loc["ProxyMode"]</label>
                <InputSelect @bind-Value="Options.ProxyMode">
                    @foreach (var name in Enum.GetNames(typeof(JobProxyMode)))
                    {
                        <option value="@name">@Loc[name]</option>
                    }
                </InputSelect>
                <br />
                <label>@Loc["NoValidProxyBehaviour"]</label>
                <InputSelect @bind-Value="Options.NoValidProxyBehaviour">
                    @foreach (var name in Enum.GetNames(typeof(NoValidProxyBehaviour)))
                    {
                        <option value="@name">@Loc[name]</option>
                    }
                </InputSelect>
                <br />
                <label>@Loc["ShuffleProxies"]</label>
                <InputCheckbox @bind-Value="Options.ShuffleProxies" />
                <br />
                <label>@Loc["MarkAsToCheckOnAbort"]</label>
                <InputCheckbox @bind-Value="Options.MarkAsToCheckOnAbort" />
                <br />
                <label>@Loc["NeverBanProxies"]</label>
                <InputCheckbox @bind-Value="Options.NeverBanProxies" />
                <br />
                <label>@Loc["ConcurrentProxyMode"]</label>
                <InputCheckbox @bind-Value="Options.ConcurrentProxyMode" />
                <br />
                <label>@Loc["PeriodicReloadIntervalSeconds"]</label>
                <InputNumber style="max-width: 100px; display: inline;" TValue="int" @bind-Value="Options.PeriodicReloadIntervalSeconds" />
                <br />
                <label>@Loc["ProxyBanTimeSeconds"]</label>
                <InputNumber style="max-width: 100px; display: inline;" @bind-Value="Options.ProxyBanTimeSeconds" />
            </EditForm>
            <hr />
            <BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02, help1x03, help1x04 }" />
        </div>
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["DataPool"]</label>
            <DataPoolSelector Options="Options.DataPool" SetOptions="((options) => Options.DataPool = options)"
                              SetWordlist="(async _ => await TryApplyRecord())"/>
            <hr />
            <BullettaHelp Title="@help2x00" Messages="new string[] { help2x01, help2x02, help2x03, help2x04, help2x05 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["ProxySources"]</label>
            <ProxySourceSelector ProxySources="Options.ProxySources" />
            <hr />
            <BullettaHelp Title="@help3x00" Messages="new string[] { help3x01, help3x02, help3x03 }" />
        </div>
        <div class="col-lg-6">
            <label class="fg-custom mt-3">@Loc["HitOutputs"]</label>
            <HitOutputsSelector HitOutputs="Options.HitOutputs" />
            <hr />
            <BullettaHelp Title="@help4x00" Messages="new string[] { help4x01, help4x02 }" />
        </div>
    </div>
</div>

@code {
    [Parameter] public MultiRunJobOptions Options { get; set; }

    private Config selectedConfig;

    protected override void OnParametersSet()
    {
        // We're in edit mode, try to set the config if it still exists
        if (!string.IsNullOrEmpty(Options.ConfigId))
        {
            selectedConfig = ConfigService.Configs.FirstOrDefault(c => c.Id == Options.ConfigId);
        }

        // Refresh the radio buttons
    }

    private async Task SelectConfig()
    {
        var modal = Modal.Show<ConfigSelector>(Loc["SelectConfig"]);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            selectedConfig = result.Data as Config;
            Options.ConfigId = selectedConfig.Id;
            Options.Bots = Math.Clamp(selectedConfig.Settings.GeneralSettings.SuggestedBots, 1, JobFactory.BotLimit);
            await TryApplyRecord();
        }
    }

    private async Task TryApplyRecord()
    {
        if (Options.DataPool is OpenBullet2.Core.Models.Data.WordlistDataPoolOptions pool)
        {
            var record = await RecordRepo.GetAll()
                .FirstOrDefaultAsync(r => r.ConfigId == Options.ConfigId && r.WordlistId == pool.WordlistId);

            Options.Skip = record?.Checkpoint ?? 0;
        }
    }

    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
    private string help1x03 => Loc["Help1x03"];
    private string help1x04 => Loc["Help1x04"];

    private string help2x00 => Loc["Help2x00"];
    private string help2x01 => Loc["Help2x01"];
    private string help2x02 => Loc["Help2x02"];
    private string help2x03 => Loc["Help2x03"];
    private string help2x04 => Loc["Help2x04"];
    private string help2x05 => Loc["Help2x05"];

    private string help3x00 => Loc["Help3x00"];
    private string help3x01 => Loc["Help3x01"];
    private string help3x02 => Loc["Help3x02"];
    private string help3x03 => Loc["Help3x03"];

    private string help4x00 => Loc["Help4x00"];
    private string help4x01 => Loc["Help4x01"];
    private string help4x02 => Loc["Help4x02"];
}