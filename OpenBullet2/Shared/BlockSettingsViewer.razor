@using OpenBullet2.Helpers
@using RuriLib.Models.Blocks
@inject Microsoft.Extensions.Localization.IStringLocalizer<BlockSettingsViewer> Loc

<EditForm Model="Block">
    <p class="fg-secondary">
        <span><b>@Block.ReadableName (@Block.Id)</b></span><br />
        <span style="font-size: 12px;"><i>@Block.Descriptor.Description</i></span><br />
        <span style="font-size: 12px;"><i>@Block.Descriptor.ExtraInfo</i></span>
    </p>

    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />

    <label>@Loc["SafeMode"]</label>
    <InputCheckbox @bind-Value="Block.Safe" />
</EditForm>

@if (Block.Descriptor.ReturnType.HasValue)
{
    <EditForm Model="Block">
        <h6 class="font-weight-bold fg-custom mt-3">@Loc["OutputVariable"] (@Block.Descriptor.ReturnType.Value):</h6>
        <InputText @bind-Value="Block.OutputVariable" />
        <label>@Loc["IsCapture"]</label>
        <InputCheckbox @bind-Value="Block.IsCapture" />
    </EditForm>
}

<h6 class="font-weight-bold fg-custom mt-3">@Loc["Settings"]:</h6>
@foreach (var setting in Block.Settings.Values)
{
    <BlockInputField BlockSetting="setting" />
}

@if (Block.Descriptor.Actions.Any())
{
    <h6 class="font-weight-bold fg-custom mt-3">@Loc["Actions"]:</h6>
    @foreach (var action in Block.Descriptor.Actions)
    {
        <button class="btn btn-sm btn-primary mr-1" title="@action.Description" @onclick="(async () => await RunAction(action))">@action.Name</button>
    }
}

@if (Block.Descriptor.Images.Any())
{
    <h6 class="font-weight-bold fg-custom mt-3">@Loc["Images"]:</h6>
    @foreach (var image in Block.Descriptor.Images)
    {
        <label>@image.Value.Name</label>
        <InputByteArrayImage
            MaxWidth="@image.Value.MaxWidth"
            MaxHeight="@image.Value.MaxHeight"
            @bind-Bytes="image.Value.Value" />
    }
}

@code {
    [Parameter] public AutoBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }

    private async Task RunAction(BlockActionInfo action)
    {
        try
        {
            action.Delegate.Invoke(Block);

        }
        catch (Exception ex)
        {
            await js.AlertException(ex);    
        }

        StateHasChanged();
    }
}
