@typeparam TItem

<div class="multiple-selector">
    <ul class="selectable-ul" style="border-color: yellowgreen;">
        @foreach (var item in NotSelected)
        {
            <li @onclick="@(() => Select(item))">@item</li>
        }
    </ul>
    <div class="multiple-selector-buttons">
        <button type="button" class="btn btn-outline-primary" @onclick="SelectAll"><span class="oi oi-arrow-right"></span></button>
        <button type="button" class="btn btn-outline-primary" @onclick="DeselectAll"><span class="oi oi-arrow-left"></span></button>
    </div>
    <ul class="selectable-ul" style="border-color: tomato;">
        @foreach (var item in Selected)
        {
            <li @onclick="@(() => Deselect(item))">@item</li>
        }
    </ul>
</div>

@code {
    [Parameter] public List<TItem> Selected { get; set; }
    [Parameter] public List<TItem> NotSelected { get; set; }
    [Parameter] public EventCallback SelectionChanged { get; set; }

    private async Task Select(TItem item)
    {
        NotSelected.Remove(item);
        Selected.Add(item);
        await SelectionChanged.InvokeAsync(null);
    }

    private async Task Deselect(TItem item)
    {
        Selected.Remove(item);
        NotSelected.Add(item);
        await SelectionChanged.InvokeAsync(null);
    }

    private async Task SelectAll()
    {
        Selected.AddRange(NotSelected);
        NotSelected.Clear();
        await SelectionChanged.InvokeAsync(null);
    }

    private async Task DeselectAll()
    {
        NotSelected.AddRange(Selected);
        Selected.Clear();
        await SelectionChanged.InvokeAsync(null);
    }
}
