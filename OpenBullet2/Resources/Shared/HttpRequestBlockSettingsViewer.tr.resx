<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Gelişmiş Ayarlar</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Bu blok nasıl çalışır?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>%HTTP İsteği% bloğu, bir uç noktaya doğru bir HTTP isteği gerçekleştirmenize izin verir. Başlıklarınız ve çerezlerinizin yanında bir gövde/body göndermek istiyorsanız, bunu içerik gönderme yollarından birini seçerek yapabilirsiniz. %Standard% modu basitçe bir String alır, UTF-8 olarak kodlar ve istek gövdesinin içine gönderir. %İçerik Türü% alanı otomatik olarak bir %İçerik-Türü% başlığına dönüştürülecek ve isteğe eklenecektir.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>İçeriğiniz bir String değil de Byte Array ise, %Raw% modu temelde Standart modla aynı işlevi görür. %Basic Auth/Temel Kimlik Doğrulama% ise Temel Erişim Kimlik Doğrulaması (tarayıcınızın içinde kimlik bilgilerini soran tipik kullanıcı adı/şifre açılır penceresi) ile kimlik doğrulaması için kullanılır. Son olarak, %Multipart% modu dizeler, raw/ham baytlar ve dosyalar gibi birden çok parçadan yapılabilen bir içerik gönderecektir. Bu, örneğin bir web sitesine bir dosya yüklemek için kullanışlıdır.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Yanıt ayrıştırılacak ve farklı varsayılan değişkenlere atanan parçalara bölünecektir. %Adres% yanıtı (%Oto yeniden yönlendirme% son yeniden yönlendirmeden sonra etkinse) `data.ADDRESS` dize değişkenine kaydedilecektir. %body/gövde% yanıtı (nam-ı diğer kaynak) String değişkeni olan `data.SOURCE` (UTF-8 dizesi olarak), ve Byte Array değişkeni olan `data.RAWSOURCE` (ör. Gzip açıldıktan sonra) içinde olacaktır.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>%Response/Yanıt Kodu% (örn. 200) tamsayı değişkeni olan `data.RESPONSECODE` içine eklenecektir. Başlıklar bir sözlüğe ayrıştırılacak ve Dizeler Sözlüğü değişkeni olan `data.HEADERS`, içine eklenecektir ve benzer şekilde `data.COOKIES` değişkenindeki çerezler için eklenecektir. data.HEADERS["header-name"]` sözdizimi ile sözlüklerden değerleri anahtara göre kolayca alabileceğinizi unutmayın. İstek başarısız olursa, `data.STATUS` değişkeni `HATA/ERROR` olarak ayarlanacaktır.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Unutulmaması gereken son bir şey, `data.COOKIES` değişkeninin içindeki çerezlerler yalnızca eklenir veya üzerine yazılır, asla silinmez. Bu, her yeni istek için tanımlayabileceğiniz %Özel Çerezler%'e ek olarak daha önce alınan çerezlerin (`data.COOKIES` içinde yer alan değişken) sonraki isteklerde tekrar gönderileceği anlamına gelir. Bu işlem, `data.COOKIES` temizlenmediği veya yeniden başlatılmadığı sürece gerçekleşir.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Gizle</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Etiket</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Ayarlar</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Göster</value>
  </data>
</root>