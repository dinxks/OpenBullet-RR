<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help1x00" xml:space="preserve">
    <value>Come funziona questo blocco?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Il blocco %Parse% ti permette di estrapolare dati da una stringa attraverso vari metodi e di salvarli in una variabile String o List of Strings. Le modalità di parsing supportate sono LR, CSS, JSON e REGEX. La modalità %LR% (Left Right) ti permette di ottenere un testo tra due stringhe note. La modalità %CSS% (CSS Selector) ti permette di leggere un attributo da un elemento di una pagina HTML.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>La modalità %JSON% (JavaScript Object Notation) ti permette di ottenere il valore di un array o oggetto JSON serializzato, attraverso l'uso di un %JToken%. Il JToken ti permette di specificare un percorso per raggiungere il valore desiderato all'interno della struttura JSON. Un esempio potrebbe essere `field1.array[0]` per indirizzare il primo elemento dell'array `array` nell'oggetto `field1`. Se invece scrivi `field1.array[*]`, otterrai tutti gli elementi dell'array.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>La modalità %REGEX% (REGular EXpression) è un metodo di parsing avanzato. Dovrai costruire un'espressione regolare e usare i gruppi di cattura per specificare l'output che desideri. Prendi per esempio il caso in cui vogliamo ottenere la parola `friend` dalla frase `hello friend 123`, dove il valore `123` cambia e quindi non possiamo usare la modalità LR. Puoi costruire una regex come `hello ([a-z]+) [\d]{3}`. Nota come c'è un gruppo di cattura, denotato dalle parentesi tonde. Nel campo %Output format% potrai scrivere `[0]` per avere in output il match completo, `[1]` per il primo gruppo di cattura e così via... Nota inoltre che puoi usare più di 1 gruppo nell'output format.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Se selezioni la casella %Recursive%, tutte le sequenze di caratteri per cui sono soddisfatte le condizioni di parsing verranno messe in una variabile List of Strings; altrimenti solo il primo riscontro verrà preso e messo in una variabile String.</value>
  </data>
  <data name="IsCapture" xml:space="preserve">
    <value>Da catturare</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Etichetta</value>
  </data>
  <data name="OutputVariable" xml:space="preserve">
    <value>Variabile di output</value>
  </data>
  <data name="SafeMode" xml:space="preserve">
    <value>Modalità sicura (scrivi eccezioni in data.ERROR)</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Impostazioni</value>
  </data>
</root>