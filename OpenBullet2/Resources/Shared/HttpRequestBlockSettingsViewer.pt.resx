<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Configurações Avançadas</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Como funciona esse bloqueio?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>O bloco %HTTP Request% permite que você execute uma solicitação HTTP para um ponto de extremidade. Se quiser enviar um corpo junto com seus cabeçalhos e cookies, você pode fazer isso selecionando uma das formas de envio de conteúdo. O modo %Standard% simplesmente pegará uma String, codificará como UTF-8 e a enviará dentro do corpo da solicitação. O campo %ContentType% será automaticamente convertido em um cabeçalho %Content-Type% e adicionado à solicitação.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>O modo %Raw% basicamente faz o mesmo que o modo Padrão se o seu conteúdo for um Byte Array e não uma String. O %Basic Auth% é usado para autenticação com autenticação de acesso básico(o pop-up típico de nome de usuário/senha que você vê dentro do seu navegador solicitando credenciais). Finalmente, o modo %Multipart% enviará um conteúdo que pode ser feito de várias partes, como strings, bytes brutos e arquivos. Isso é útil, por exemplo, para fazer upload de um arquivo para um site.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>The response will be parsed and divided into chunks which will be assigned to different default variables. The response %Address% (after the last redirect if you have %Auto Redirect% enabled) will be saved into the String variable `data.ADDRESS`. The response %body% (a.k.a source) will be inside the String variable `data.SOURCE` (as a UTF-8 string), and inside the Byte Array variable `data.RAWSOURCE` (after decompression of e.g. gzip).</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>O %ResponseCode% (por exemplo, 200) será inserido na variável inteira `data.RESPONSECODE`. Os cabeçalhos serão analisados ​​em um dicionário e inseridos na variável `data.HEADERS` do Dicionário de Strings, e da mesma forma para cookies na variável` data.COOKIES`. Lembre-se de que você pode facilmente recuperar valores de dicionários por chave com a sintaxe `data.HEADERS [" header-name "]`. Se a solicitação falhar, a variável `data.STATUS` será definida como` ERROR`.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Uma última coisa a lembrar é que os cookies dentro da variável `data.COOKIES` são apenas adicionados ou substituídos, nunca excluídos. Isso significa que os cookies recebidos anteriormente (que estão dentro da variável `data.COOKIES`) serão enviados novamente nas próximas solicitações, além dos %CustomCookies% que você pode definir para cada nova solicitação. Isso acontece a menos que `data.COOKIES` seja apagado ou reinicializado.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Esconder</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Rótulo</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Configurações</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Mostrar</value>
  </data>
</root>