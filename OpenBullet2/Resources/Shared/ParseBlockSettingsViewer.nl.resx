<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help1x00" xml:space="preserve">
    <value>Hoe werkt dit blok?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Met het %Verwerk% -blok kunt u gegevens uit een string verwerken met veel verschillende verwerkmethoden en deze opslaan in een String- of List of Strings-variabele. De ondersteunde verwerk methodes zijn LR, CSS, JSON en REGEX. De %LR% (Links Rechts) modus maakt het mogelijk om tekst tussen twee gegeven strings te ontleden. De %CSS% (CSS Selector) -modus maakt het mogelijk om het attribuut van een element uit een HTML-pagina te halen.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>De %JSON% (JavaScript Object Notation) -modus maakt het mogelijk om de waarde van een JSON-geserialiseerd object of array op te halen met behulp van een %JToken%. Met de JToken kunt u een pad specificeren om de gewenste waarde binnen de JSON-structuur te bereiken. Een voorbeeld hiervan zou `field1.array [0]` kunnen zijn om het eerste element van de array `array` binnen het object` field1` te adresseren. Als je in plaats daarvan `field1.array [*]` schrijft, krijg je alle elementen van de array.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>De %REGEX% -modus (REGular EXpression) is een geavanceerde verwerkmethode. U moet een reguliere expressie maken en %capturing groep% gebruiken om te specificeren wat u wilt dat de uitvoer is. Neem bijvoorbeeld het geval waarin we de zin 'hallo vriend 123' ontleden en we het woord 'vriend' willen krijgen, in het geval waarin '123' een veranderende waarde is en we de LR-modus niet kunnen gebruiken. Je zou een regex kunnen maken zoals `hallo ([a-z]+ )[\d]{3}`. Merk op hoe er een veroverende groep is, aangegeven door de ronde beugels. Vervolgens kunt u in het veld %Uitvoerformaat% "[0]" schrijven om de volledige overeenkomst uit te voeren, "[1]" om de eerste vastgelegde groep uit te voeren, enzovoort ... Merk op dat u er meer dan 1 kunt gebruiken groep in het outputformaat.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Als u het aankruisvakje %Recursive% aanvinkt, worden alle tekenreeksen die aan de ontledingscriteria voldoen, in een Variabele Lijst met tekenreeksen geplaatst; anders wordt alleen de eerste overeenkomst gebruikt en in een String-variabele geplaatst.</value>
  </data>
  <data name="IsCapture" xml:space="preserve">
    <value>Vastleggen</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="OutputVariable" xml:space="preserve">
    <value>Uitvoervariabele</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Instellingen</value>
  </data>
</root>