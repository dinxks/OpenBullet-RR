<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bots" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>di</value>
  </data>
  <data name="ConcurrentProxyMode" xml:space="preserve">
    <value>Modalità proxy contemporanei</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="DataPool" xml:space="preserve">
    <value>Pool di dati</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Predefinito</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Cosa sono queste opzioni?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Quando crei un MultiRun Job devi specificare una %config%. Nella sezione %Config% puoi crearne una o importarne una esistente. Quando hai testato la config nel debugger della sezione Config, puoi selezionarla qui per eseguirla con tanti bot in parallelo. Clicca semplicemente il tasto %Seleziona config% e potrai scegliere la config desiderata da una lista. Verrà anche visualizzata un'anteprima del file %leggimi% della config.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>La %Modalità proxy% decide se i proxy saranno usati durante l'esecuzione della config. Se lo lasci su %Default% verrà usato ciò che è specificato nelle impostazioni della config (sezione Proxy, opzione %Usa i proxy%). Se scegli %On% o %Off%, questi prevarranno sull'opzione predefinita della config.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>I %Bots% sono il numero di lavoratori paralleli che eseguiranno la tua config, ognuno con una linea di dati dalla pool di dati che hai specificato (come ad esempio una wordlist). Più bots metti, più richieste verranno fatte allo stesso tempo, ma attenzione perchè c'è un %limite% che dipende dall'hardware della tua macchina, dopo il quale incrementare il numero di bots peggiora le performance!</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>L'opzione %Salta% definisce quante righe saltare dall'inizio della pool di dati. Questo valore viene impostato in automatico appena selezioni una coppia di config e wordlist che hai già eseguito in passato, dato che vengono salvati periodicamente dei checkpoint del progresso nel database.</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Cos'è una pool di dati?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>Una %Pool di dati% è la sorgente di tutte le righe di dati che verranno assegnate ai bots. La pool di dati verrà letta riga per riga e, ogni volta che c'è un bot disponibile, gli verrà assegnata una riga da processare. Ci sono molti modi di inizializzare una pool di dati. Il modo più comune è grazie a una %wordlist%. Per usare una wordlist, devi prima importarne una nella sezione %Wordlists%. Una volta che hai importato una wordlist, clicca semplicemente sul pulsante %Seleziona wordlist% e seleziona la wordlist che vuoi usare. Vedrai anche un'anteprima della prime righe della wordlist.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>Se scegli l'opzione %File%, puoi saltare la fase di importazione della wordlist, ma perderai alcune funzionalità come ad esempio il salvataggio del progresso della tua coppia wordlist-config nel database e la relazione tra le hits e la wordlist che è stata usata per ottenerle. Le wordlist sono il metodo da preferire per utilizzare i dati provenienti da un file, quindi ti consiglio di dare un'occhiata alla sezione Wordlists! Devi anche specificare un %Tipo di wordlist%, fai riferimento alla solita sezione Wordlists per avere spiegazioni riguardo questa opzione.</value>
  </data>
  <data name="Help2x03" xml:space="preserve">
    <value>L'opzione %Intervallo% genererà semplicemente un intervallo numerico, partendo da un valore iniziale. Per esempio se imposti %Inizio% = 0, %Quantità% = 5 e %Incremento% = 2 genererà 5 righe di dati con i valori 0, 2, 4, 6 e 8. Se selezioni la casella %Applica padding%, verranno aggiunti degli zeri a sinistra del numero in base al numero di cifre del numero più grande che verrà generato, per esempio se il numero più grande è 100 vedrai valori come 001, 042 ecc. nella tua pool di dati generata.</value>
  </data>
  <data name="Help2x04" xml:space="preserve">
    <value>L'opzione %Combinazioni% ti permetterà di generare tutte le possibili combinazioni di un dato %Set di caratteri% per una %Lunghezza% specificata. Per esempio se usi ABCD come Set di caratteri e Lunghezza = 4 otterrai combinazioni come AAAA, AAAB, ... ACCB ... DDDC, DDDD.</value>
  </data>
  <data name="Help2x05" xml:space="preserve">
    <value>L'opzione %Infinite% genererà un numero infinito di righe di dati vuote, quindi il job andrà avanti finchè non decidi tu di fermarlo.</value>
  </data>
  <data name="Help3x00" xml:space="preserve">
    <value>Cos'è una fonte di proxy?</value>
  </data>
  <data name="Help3x01" xml:space="preserve">
    <value>Le %Fonti di proxy% sono usate per definire da dove verranno caricati i proxy ogni volta che vengono aggiunti alla pool di proxy da assegnare ai bots. Le fonti di proxy saranno interpellate all'inizio di un job, e anche ogni volta che tutti i proxy sono bannati o quando una condizione forza la ricarica dei proxy. Una fonte di tipo %Gruppo% prenderà i proxy da un gruppo definito nella sezione %Proxy%. Per usare questa opzione, devi avere un gruppo con alcuni proxy al suo interno, fai riferimento alla sezione Proxy per istruzioni su come fare.</value>
  </data>
  <data name="Help3x02" xml:space="preserve">
    <value>Una fonte di proxy del tipo %File% caricherà i proxy da un dato file su disco. Puoi scrivere il percorso completo del file che desideri e anche il %tipo% che verrà usato come predefinito se nessun tipo viene specificato attraverso la sintassi avanzata. Puoi modificare il contenuto del file in qualsiasi momento, e la prossima volta che verranno ricaricati i proxy avrai i tuoi proxy nuovi di zecca importati dal file.</value>
  </data>
  <data name="Help3x03" xml:space="preserve">
    <value>Una fonte di proxy di tipo %Remoto% interpellerà una risorsa remota, per esempio un servizio API di un provider di proxy, per ottenere una lista di proxy. Di nuovo, dovrai specificare un %tipo% di proxy da usare come opzione predefinita. Questa opzione può essere usata per ricevere proxy freschi e funzionanti che sono già stati controllati da un servizio esterno.</value>
  </data>
  <data name="Help4x00" xml:space="preserve">
    <value>Cos'è un output delle hit?</value>
  </data>
  <data name="Help4x01" xml:space="preserve">
    <value>Un %Output delle hit% è un luogo in cui verranno mandate le hit dopo che sono state trovate. L'opzione %Database% (può essercene soltanto una) scriverà le hit nel database predefinito di OpenBullet 2. Potrai esplorare le hit presenti nel database tramite la sezione %Hits%. L'opzione %File system% (può essercene soltanto una) salverà la hit in una struttura di cartelle organizzata su disco. Scrivi semplicemente il percorso della cartella base dove vuoi che sia creata la struttura di cartelle.</value>
  </data>
  <data name="Help4x02" xml:space="preserve">
    <value>Infine, l'opzione %Webhook di discord% ti permetterà di mandare le hit a un webhook discord usando uno username e avatar personalizzati (quest'ultimo specificato tramite l'URL di un'immagine hostata in una repository pubblica). Per usare questa opzione dovrai creare un webhook discord per un canale nel tuo server ed incollare l'URL nella casella appropriata.</value>
  </data>
  <data name="HitOutputs" xml:space="preserve">
    <value>Output delle hit</value>
  </data>
  <data name="MarkAsToCheckOnAbort" xml:space="preserve">
    <value>Marca come da controllare quando interrompi</value>
  </data>
  <data name="NeverBanProxies" xml:space="preserve">
    <value>Non bannare mai i proxy</value>
  </data>
  <data name="NoConfigSelected" xml:space="preserve">
    <value>Nessuna config selezionata</value>
  </data>
  <data name="NoValidProxyBehaviour" xml:space="preserve">
    <value>Comportamento per nessun proxy valido</value>
  </data>
  <data name="Off" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="PeriodicReloadIntervalSeconds" xml:space="preserve">
    <value>Intervallo di ricarica periodico (secondi, 0 per disabilitare)</value>
  </data>
  <data name="ProxyBanTimeSeconds" xml:space="preserve">
    <value>Tempo di ban dei proxy (secondi)</value>
  </data>
  <data name="ProxyMode" xml:space="preserve">
    <value>Modalità proxy</value>
  </data>
  <data name="ProxySources" xml:space="preserve">
    <value>Fonti di proxy</value>
  </data>
  <data name="ReloadProxiesWhenAllBanned" xml:space="preserve">
    <value>Ricarica proxy quando sono tutti bannati</value>
  </data>
  <data name="SelectConfig" xml:space="preserve">
    <value>Seleziona config</value>
  </data>
  <data name="ShuffleProxies" xml:space="preserve">
    <value>Mischia i proxy</value>
  </data>
  <data name="Skip" xml:space="preserve">
    <value>Salta</value>
  </data>
  <data name="StartCondition" xml:space="preserve">
    <value>Condizione d'inizio</value>
  </data>
</root>