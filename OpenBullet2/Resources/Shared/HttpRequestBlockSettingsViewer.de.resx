<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Erweiterte Einstellungen</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Wie funktioniert dieser Block?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Der %HTTP Request% Block erlaubt es dir, eine HTTP-Anfrage an einen Endpunkt zu stellen. Wenn du neben deinen Headern und Cookies auch einen Body senden möchtest, kannst du dies tun, indem du eine der Möglichkeiten zum Senden von Inhalten auswählst. Der %Standard% Modus nimmt einfach einen String, kodiert ihn als UTF-8 und sendet ihn innerhalb des Request Bodys. Das %Content Type% Feld wird automatisch in einen %Content-Type% Header umgewandelt und der Anfrage hinzugefügt.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Der %Raw% Modus macht im Grunde das Gleiche wie der Standard Modus, wenn dein Inhalt ein Byte Array und kein String ist. Der %Basic Auth% Modus wird für die Authentifizierung mit Basic Access Authentication verwendet (das typische Benutzername/Passwort-Popup, das du in deinem Browser siehst und das nach deinen Zugangsdaten fragt). Schließlich sendet der %Multipart% Modus einen Inhalt, der aus mehreren Teilen bestehen kann, wie Strings, Rohbytes und Dateien. Dies ist zum Beispiel nützlich, um eine Datei auf eine Webseite hochzuladen.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Die Antwort wird geparst und in Stücke aufgeteilt, die verschiedenen Standardvariablen zugewiesen werden. Die Antwort %Address% (nach dem letzten Redirect, wenn du %Auto Redirect% aktiviert hast) wird in der String Variable `data.ADDRESS` gespeichert. Die Antwort %body% (auch bekannt als Quelle) wird in der String-Variable `data.SOURCE` (als UTF-8 String) und in der Byte-Array-Variable `data.RAWSOURCE` (nach der Dekomprimierung von z.B. gzip) gespeichert.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Der %Response Code% (z.B. 200) wird in die Integer Variable `data.RESPONSECODE` eingefügt. Die Kopfzeilen werden in ein Wörterbuch geparst und in die Dictionary of Strings Variable `data.HEADERS` eingefügt, und ebenso für Cookies in die `data.COOKIES` Variable. Denke daran, dass du Werte aus Wörterbüchern einfach nach Schlüssel mit der Syntax `data.HEADERS["header-name"]` abrufen kannst. Wenn die Anfrage fehlschlägt, wird die Variable `data.STATUS` auf `ERROR` gesetzt.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Eine letzte Sache, die du dir merken solltest, ist, dass Cookies in der Variable `data.COOKIES` nur hinzugefügt oder überschrieben werden, niemals gelöscht. Das bedeutet, dass zuvor empfangene Cookies (die sich in der Variable `data.COOKIES` befinden) bei den nächsten Anfragen erneut gesendet werden, zusätzlich zu den %Custom Cookies%, die du für jede neue Anfrage definieren kannst. Dies geschieht, solange `data.COOKIES` nicht gelöscht oder neu initialisiert wird.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Verstecken</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Bezeichnung</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Einstellungen</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Zeigen</value>
  </data>
</root>