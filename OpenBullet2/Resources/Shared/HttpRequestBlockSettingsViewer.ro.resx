<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Setari avansate</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Cum functioneaza acest bloc?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Blocul %HTTP Request% va permite sa efectuati o cerere HTTP catre un punct final. Daca doriti sa trimiteti un corp alaturi de anteturi si cookie-uri, puteti face acest lucru selectand una dintre modalitatile de trimitere a continutului. Modul %Standard% va lua pur si simplu un sir, il va codifica ca UTF-8 si il va trimite in corpul cererii. Campul %Content Type% va fi convertit automat intr-un antet %Content-Type% si adaugat la cerere.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Modul %Raw% face practic acelasi lucru cu modul Standard daca continutul dvs. este un Byte Array si nu un sir.%Basic Auth% este utilizat pentru autentificarea cu autentificare Basic Access (popup-ul tipic de utilizator / parola pe care il vedeti in browserul dvs. cerand acreditari). In cele din urma, modul %Multipart% va trimite un continut care poate fi format din mai multe parti, cum ar fi strings, octeti bruti si fisiere. Acest lucru este util, de exemplu, pentru a incarca un fisier pe un site web.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Raspunsul va fi analizat si impartit in bucati care vor fi atribuite diferitelor variabile implicite.Raspunsul %Adresa% (dupa ultima redirectionare daca aveti activata %Redirectionare automata%) va fi salvat in variabila Sir 'date.ADDRESS'. Raspunsul %body% (a.k. o sursa) va fi in variabila String `data.SOURCE` (ca un sir UTF-8) si in interiorul variabilei Byte Array `data.RAWSOURCE` (dupa decompresie de ex. Gzip).</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>%Response Code% (de ex. 200) va fi inserat in variabila Intreg `data.RESPONSECODE`. Anteturile vor fi analizate intr-un dictionar si inserate in variabila Dictionar de siruri `data.HEADERS` si, de asemenea, pentru cookie-urile din variabila `data.COOKIES`. Amintiti-va ca puteti extrage cu usurinta valorile din dictionare prin cheie cu sintaxa `date.HEADERS["header-name"]`. Daca solicitarea esueaza, variabila `data.STATUS` va fi setata ca 'EROARE'.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Un ultim lucru de retinut este ca cookie-urile din variabila `data.COOKIES` sunt doar adaugate sau suprascrise, niciodata sterse. Aceasta inseamna ca cookie-urile primite anterior (care se afla in variabila `data.COOKIES`) vor fi trimise din nou in urmatoarele solicitari, in plus fata de %Cookies personalizate% pe care le puteti defini pentru fiecare noua solicitare. Acest lucru se intampla cu exceptia cazului in care 'data.COOKIES' este sters sau reinitializat.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Ascunde</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Eticheta</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Setari</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Arata</value>
  </data>
</root>