<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help1x00" xml:space="preserve">
    <value>How does this block work?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>O bloco %Parse% permite analisar dados de uma string com muitos métodos de análise diferentes e armazená-los em uma variável String ou Lista de Strings. Os modos de análise suportados são LR, CSS, JSON e REGEX. O modo %LR% (esquerda direita) permite analisar o texto entre duas strings fornecidas. O modo %CSS% (Seletor CSS) permite obter o atributo de um elemento de uma página HTML.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>O modo %JSON% (JavaScript Object Notation) permite obter o valor de um objeto serializado JSON ou matriz usando um %JToken%. O JToken permite que você especifique um caminho para alcançar o valor desejado dentro da estrutura JSON. Um exemplo disso poderia ser `field1.array [0]` para endereçar o primeiro elemento do array `array` dentro do objeto` field1`. Se você escrever `field1.array [*]` ao invés, você obterá todos os elementos do array.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>O modo% REGEX% (Expressão Regular) é um método de análise avançado. Você precisará construir uma expressão regular e usar %capturing groups% para especificar o que deseja que a saída seja. Tome por exemplo o caso em que estamos analisando a frase `hello friend 123` e queremos a palavra` friend`, no caso em que `123` é um valor mutável e não podemos usar o modo LR. Você poderia construir um regex como `hello ([a-z] +) [d] {3}`. Observe como há um grupo de captura, denotado pelas chaves redondas. Então, no campo %Output format% você será capaz de escrever `[0]` para gerar a correspondência completa, `[1]` para gerar o primeiro grupo capturado e assim por diante ... Observe que você pode usar mais de 1 grupo no formato de saída.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Se você marcar a caixa de seleção %Recursive%, todas as sequências de caracteres que atendem aos critérios de análise serão colocadas dentro de uma variável de Lista de Strings; caso contrário, apenas a primeira correspondência será obtida e colocada em uma variável String.</value>
  </data>
  <data name="IsCapture" xml:space="preserve">
    <value>É captura</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Rótulo</value>
  </data>
  <data name="OutputVariable" xml:space="preserve">
    <value>Variável de saída</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Configurações</value>
  </data>
</root>