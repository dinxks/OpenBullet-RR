<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Geavanceerde instellingen</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Hoe werkt dit blok?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Met de %HTTP Request% -blok kunt u een HTTP-verzoek naar een eindpunt sturen. Als u naast uw headers en cookies een tekst wilt sturen, kunt u dat doen door een van de manieren te selecteren om inhoud te verzenden. De %Standaard% -modus neemt gewoon een tekenreeks, codeert deze als UTF-8 en verzendt deze naar de header van het verzoek. Het veld %Content Type% wordt automatisch omgezet in een header %Content-Type% en aan het verzoek toegevoegd.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>De %Raw% -modus doet in principe hetzelfde als de standaardmodus als uw inhoud een byte-array is en geen string. De %Basic Auth% wordt gebruikt voor authenticatie met Basic Access Authentication (de typische pop-up met gebruikersnaam / wachtwoord die u in uw browser ziet en om inloggegevens vraagt). Ten slotte zal de %Multipart% -modus een inhoud verzenden die uit meerdere delen kan worden gemaakt, zoals strings, onbewerkte bytes en bestanden. Dit is bijvoorbeeld handig om een ​​bestand naar een website te uploaden.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Het antwoord wordt verwerkt en verdeeld in stukken die aan verschillende standaardvariabelen worden toegewezen. Het antwoord %Address% (na de laatste omleiding als %Auto Redirect% is ingeschakeld) wordt opgeslagen in de String-variabele `data.ADDRESS`. De antwoord %bron% zal binnen de String-variabele 'data.SOURCE' (als een UTF-8-string) staan, en binnen de Byte Array-variabele 'data.RAWSOURCE' (na decompressie van bijvoorbeeld gzip).</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>De %Response Code% (bijv. 200) wordt ingevoegd in de Integer-variabele `data.RESPONSECODE`. De headers worden verwerkt naar een woordenboek en ingevoegd in de variabele `data.HEADERS` van de Dictionary of Strings, en ook voor cookies in de variabele` data.COOKIES`. Onthoud dat u gemakkelijk waarden uit woordenboeken kunt ophalen op sleutel met de syntax `data.HEADERS [" header-name "]`. Als het verzoek mislukt, wordt de variabele 'data.STATUS' ingesteld op 'ERROR'.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Een laatste ding om te onthouden is dat cookies in de `data.COOKIES` variabele alleen worden toegevoegd of overschreven, nooit verwijderd. Dit betekent dat eerder ontvangen cookies (die zich in de `data.COOKIES` -variabele bevinden) opnieuw worden verzonden binnen de volgende verzoeken, naast de %Custom Cookies% die u voor elk nieuw verzoek kunt definiëren. Dit gebeurt tenzij `data.COOKIES` wordt gewist of opnieuw wordt geïnitialiseerd.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Verbergen</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Instellingen</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Laten zien</value>
  </data>
</root>