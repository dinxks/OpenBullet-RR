<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Impostazioni avanzate</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Come funziona questo blocco?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Il blocco %HTTP Request% ti permette di effettuare una richiesta HTTP verso un endpoint. Se vuoi inviare un corpo assieme ai tuoi headers e cookies puoi farlo selezionando uno dei modi per mandare i contenuti. La modalità %Standard% semplicemente prenderà una String, la codificherà come UTF-8 e la manderà nel corpo della richiesta. Il campo %Content Type% sarà automaticamente convertito nell'header %Content-Type% e aggiunto alla tua richiesta.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>La modalità %Raw% fa la stessa cosa della modalità Standard se il tuo contenuto è un Byte Array e non una String. La %Basic Auth% è usata per autenticare tramite Basic Access Authentication (il tipico popup con username/password che vedi nel browser quando ti chiede le credenziali). Infine, la modalità %Multipart% manderà un contenuto che può essere fatto di più parti, come stringhe, bytes e files. Questo è utile ad esempio quando si vuole caricare un file su un sito.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>La risposta verrà letta e divisa in parti che verranno assegnati a diverse variabili predefinite. L'%indirizzo% (dopo l'ultimo redirect se hai selezionato %Auto Redirect%) sarà salvato nella variabile `data.ADDRESS` di tipo String. Il %corpo% della risposta (ovvero il sorgente) verrà assegnato alla variabile di tipo String `data.SOURCE` (come stringa UTF-8), e alla variabile di tipo Byte Array `data.RAWSOURCE` (dopo la decompressione ad esempio di gzip).</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Il %codice della risposta% (es. 200) verrà inserito nella variabile `data.RESPONSECODE` di tipo Integer. Gli headers saranno trasformati in un dizionario e messi nella variabile `data.HEADERS` di tipo Dictionary of Strings, e similmente per i cookies nella variabile `data.COOKIES`. Ricorda che puoi ricavare valori dai dizionari molto facilmente data la loro chiave con la sintassi `data.HEADERS["nome-header"]`. Se la richiesta fallisce, alla variabile `data.STATUS` verrà assegnato il valore `ERROR`.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>Un'ultima cosa da ricordare è che i cookies nella variabile `data.COOKIES` vengono solo aggiunti o sovrascritti, mai cancellati. Questo significa che i cookies ricevuti in precedenza verranno inviati nuovamente nelle richieste future, oltre ai %Custom Cookies% che puoi definire per ogni nuova richiesta. Questo accade a meno che `data.COOKIES` venga pulita o reinizializzata.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Nascondi</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Etichetta</value>
  </data>
  <data name="SafeMode" xml:space="preserve">
    <value>Modalità sicura (scrivi eccezioni in data.ERROR)</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Impostazioni</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Mostra</value>
  </data>
</root>