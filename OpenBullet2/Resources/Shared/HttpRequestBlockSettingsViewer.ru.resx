<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedSettings" xml:space="preserve">
    <value>Дополнительные настройки</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Как работает этот блок?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Блок %HTTP Request% позволяет выполнить HTTP-запрос к конечной точке. Если вы хотите отправить тело запроса вместе с заголовками и cookies, вы можете сделать это, выбрав один из способов отправки содержимого. Режим %Standard% просто возьмет строку, закодирует ее в UTF-8 и отправит внутрь тела запроса. Поле %Content Type% будет автоматически преобразовано в заголовок %Content-Type% и добавлено в запрос.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Режим %Raw% в основном делает то же самое, что и режим Standard, если ваше содержимое представляет собой массив байтов, а не строку. Режим %Basic Auth% используется для аутентификации с помощью Basic Access Authentication (типичное всплывающее окно с именем пользователя/паролем, которое вы видите в браузере, запрашивающее учетные данные). Наконец, режим %Multipart% отправляет содержимое, которое может состоять из нескольких частей, таких как строки, необработанные байты и файлы. Это полезно, например, для загрузки файла на веб-сайт.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Ответ будет разобран и разделен на фрагменты, которые будут присвоены различным переменным по умолчанию. Ответ %Address% (после последнего перенаправления, если у вас включена функция %Auto Redirect%) будет сохранен в строковой переменной `data.ADDRESS`. Ответ %body% (он же источник) будет находиться в строковой переменной `data.SOURCE` (в виде строки UTF-8) и в переменной массива байт `data.RAWSOURCE` (после распаковки, например, gzip).</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>Код %Response Code% (например, 200) будет вставлен в целочисленную переменную `data.RESPONSECODE`. Заголовки будут разобраны в словарь и вставлены в переменную `data.HEADERS`, а cookies - в переменную `data.COOKIES`. Помните, что вы можете легко получить значения из словарей по ключу с помощью синтаксиса `data.HEADERS["header-name"]`. Если запрос не удался, переменная `data.STATUS` будет установлена в `ERROR`.</value>
  </data>
  <data name="Help1x05" xml:space="preserve">
    <value>И последнее, о чем следует помнить: куки-файлы внутри переменной `data.COOKIES` только добавляются или перезаписываются, но никогда не удаляются. Это означает, что ранее полученные cookies (которые находятся в переменной `data.COOKIES`) будут снова отправляться при следующих запросах, в дополнение к %Custom Cookies%, которые вы можете определить для каждого нового запроса. Это произойдет, если `data.COOKIES` не будет очищена или переинициализирована.</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Скрыть</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Этикетка</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Настройки</value>
  </data>
  <data name="Show" xml:space="preserve">
    <value>Показать</value>
  </data>
</root>