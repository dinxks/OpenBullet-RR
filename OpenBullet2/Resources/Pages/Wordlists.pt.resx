<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root"
    xmlns=""
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Adicionar</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Adicionado</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>A wordlist foi adicionada com sucesso!</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Adicionar Wordlist</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>Deletar o arquivo também?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Tem certeza?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Deletar</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>Você quer deletar</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>do disco também?</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Editar wordlist</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Nome do Arquivo</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Como isso funciona?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Aqui você pode importar wordlists. Primeiro de tudo, clique no botão %Adicionar% acima. Você poderá especificar um %Tipo de Wordlist% (mais informações sobre isso virão depois), um %Nome% e um %Propósito%. Você terá duas opções para enviar seus arquivos. A primeira opção é de %enviar% ao servidor que está rodando a instância do OpenBullet 2. Esse é o método preferível %se a wordlist estiver no client% em que você está acessando o OB2 pelo navegador, mas o OB2 está sendo hospedado em uma máquina diferente. Esse método de adicionar a wordlist gera uma sobrecarga pois a wordlist precisa ser enviada pelo navegador.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%Se a wordlist estiver no servidor%, o que significa que você está tentando acessar um arquivo da mesma maquina que está rodando o OB2, vocÊ pode usar a opção %Arquivos do Sistema%, que vai deixar você navegar por todos arquivos da maquina e selecionar o arquivo que deseja. Observe que para acessar pastas do disco que estão fora do directório do OB2, você precisará navegar até as opções de segurança do OpenBullet e ativar a opção %permitir acesso à arquivos por todo sistema%.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>A respeito do %Tipo de Wordlist%, você encontrará os tipos atualmente disponíveis no arquivo %Settings/Environment.ini% no diretório do OB2. Tipos de wordlist são carregados quando o OB2 inicia. Você pode modificar esse arquivo e adicionar/remover/modificar tipos de wordlist para combinar com o formato de suas wordlists. Você pode ler mais sobre os tipos de wordlist na seção %guides% do forum oficial.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>Não, mantenha o arquivo</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Linhas</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Carregando</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Sem registros para exibir</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Você deve selecionar uma wordlist primeiro</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Propósito</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Você realmente quer deletar</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>resultados</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Resultados por pagina</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
</root>