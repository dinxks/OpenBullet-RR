<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddGroup" xml:space="preserve">
    <value>Gruppe hinzufügen</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>Alle</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Wirklich sicher?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Abbruch</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Land</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Erstellt</value>
  </data>
  <data name="CreateProxyGroup" xml:space="preserve">
    <value>Proxy Gruppe erstellen</value>
  </data>
  <data name="DeleteAllProxies" xml:space="preserve">
    <value>Alle Proxies löschen</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>gelöscht</value>
  </data>
  <data name="DeleteGroup" xml:space="preserve">
    <value>Gruppe löschen</value>
  </data>
  <data name="DeleteNotWorking" xml:space="preserve">
    <value>Nichtfunktionierende löschen</value>
  </data>
  <data name="DeleteSlow" xml:space="preserve">
    <value>Langsame löschen</value>
  </data>
  <data name="DeleteUntested" xml:space="preserve">
    <value>Ungetestete löschen</value>
  </data>
  <data name="EditGroup" xml:space="preserve">
    <value>Gruppe bearbeiten</value>
  </data>
  <data name="EditProxyGroup" xml:space="preserve">
    <value>Proxy Gruppe bearbeiten</value>
  </data>
  <data name="ForThisGroup" xml:space="preserve">
    <value>Für diese Gruppe</value>
  </data>
  <data name="GroupInUse" xml:space="preserve">
    <value>Gruppe wird verwendet</value>
  </data>
  <data name="GroupInUseWarning" xml:space="preserve">
    <value>Ein Job verwendet derzeit diese Proxy-Gruppe. Bitte stoppe und entferne den Job aus dem Manager und versuche es erneut.
Verbindungs-Timeout (Millisekunden)</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Wie funktioniert das?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Hier kannst du deine Proxys in verschiedene %Gruppen% importieren. Gruppen helfen dabei, die Proxys zu organisieren und geben dir die Möglichkeit, verschiedene Proxys für verschiedene Aufgaben zu verwenden. Als erstes solltest du eine Gruppe erstellen, indem du oben auf den %Gruppe hinzufügen% Button klickst. Gib ihr einfach einen Namen. Stelle sicher, dass deine neue Gruppe ausgewählt ist und klicke dann auf %Proxies importieren%.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Das %Proxies importieren% Menü gibt dir 3 Möglichkeiten, deine Proxies zu importieren. Du kannst sie entweder %einfügen%, %eine Datei hochladen% oder %die URL% einer entfernten Ressource eingeben, die Proxies in einem Textformat bereitstellt (normalerweise einen pro Zeile). Du kannst auch die Standard %Art%, %Benutzername% und %Passwort% für die Proxies angeben. Alternativ kannst du die %erweiterte Syntax% verwenden, die im Formular beschrieben ist, um den Typ, den Benutzernamen und das Passwort auf einer per Proxy Basis festzulegen.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Jetzt bist du bereit und kannst deine Proxy-Gruppe auswählen, wenn du einen Job erstellst oder bearbeitest. Du kannst einen Job vom Typ %Proxy Check% erstellen, um zu testen, ob deine Proxys funktionieren, bevor du sie benutzt. Der Job %Proxy Check% wird die Felder %Land%, %Status%, %Ping% und %zuletzt geprüft% deiner Proxys in der Datentabelle dieser Seite aktualisieren, so dass du dann %Proxys löschen% kannst, die nicht funktionieren oder einen Ping haben, der für deine Bedürfnisse zu hoch ist. Du kannst sogar entscheiden, dass du nur Proxys aus einem bestimmten Land behalten willst!</value>
  </data>
  <data name="Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="Imported" xml:space="preserve">
    <value>Importiert</value>
  </data>
  <data name="ImportProxies" xml:space="preserve">
    <value>Proxies importieren</value>
  </data>
  <data name="LastChecked" xml:space="preserve">
    <value>zuletzt geprüft</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Lade</value>
  </data>
  <data name="NoGroupSelected" xml:space="preserve">
    <value>Bitte wähle zunächst eine Gruppe aus</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Keine anzuzeigenden Datensätze</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Passwort</value>
  </data>
  <data name="Ping" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="pingOver" xml:space="preserve">
    <value>Ping über</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="ProxiesDeletedSuccessfully" xml:space="preserve">
    <value>Proxies erfolgreich gelöscht</value>
  </data>
  <data name="ProxiesImportedSuccessfully" xml:space="preserve">
    <value>Proxies erfolgreich importiert</value>
  </data>
  <data name="ProxyGroup" xml:space="preserve">
    <value>Proxy Gruppe</value>
  </data>
  <data name="ProxyGroupCreated" xml:space="preserve">
    <value>Die Proxy Gruppe wurde erfolgreich erstellt!</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Wirklich löschen?</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>Ergebnisse</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Ergebnisse pro Seite</value>
  </data>
  <data name="Slow" xml:space="preserve">
    <value>Langsam</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Art</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Benutzername</value>
  </data>
</root>