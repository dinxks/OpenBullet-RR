<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Aggiungi</value>
  </data>
  <data name="AddBlank" xml:space="preserve">
    <value>Aggiungi Vuoto</value>
  </data>
  <data name="AllowedProxyTypes" xml:space="preserve">
    <value>Tipi di proxy ammessi</value>
  </data>
  <data name="AllowedWordlistTypes" xml:space="preserve">
    <value>Tipi di wordlist ammessi</value>
  </data>
  <data name="AlwaysOpenBrowser" xml:space="preserve">
    <value>Apri sempre il browser all'inizio</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Sei sicuro/a?</value>
  </data>
  <data name="BanLoopEvasion" xml:space="preserve">
    <value>Evasione del ban loop, cioè dopo quanti stati di BAN la riga dati deve essere marcata come TOCHECK ed il proxy deve essere bannato (0 per disattivare)</value>
  </data>
  <data name="BanStatuses" xml:space="preserve">
    <value>Banna il proxy quando il bot termina con uno di questi stati</value>
  </data>
  <data name="BlockedUrls" xml:space="preserve">
    <value>URL bloccati</value>
  </data>
  <data name="BlockedUrlsInfo" xml:space="preserve">
    <value>Se l'URL della risorsa contiene una delle seguenti stringhe di testo, non verrà caricata. Non sensibile a maiuscole e minuscole.</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annulla</value>
  </data>
  <data name="CaseSensitive" xml:space="preserve">
    <value>Case sensitive</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Pulisci</value>
  </data>
  <data name="ContinueStopStatuses" xml:space="preserve">
    <value>Stati per cui il bot dovrà continuare / fermarsi</value>
  </data>
  <data name="CPMLimit" xml:space="preserve">
    <value>Limite CPM (0 per nessun limite)</value>
  </data>
  <data name="CustomInputs" xml:space="preserve">
    <value>Input Personalizzati</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Dati</value>
  </data>
  <data name="DataRules" xml:space="preserve">
    <value>Regole Dati</value>
  </data>
  <data name="DefaultAnswer" xml:space="preserve">
    <value>Risposta Predefinita</value>
  </data>
  <data name="DisableWebpagesNotifications" xml:space="preserve">
    <value>Disabilita le notifiche dalle pagine web</value>
  </data>
  <data name="DismissDialogs" xml:space="preserve">
    <value>Chiudi i dialog</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>Generali</value>
  </data>
  <data name="Headless" xml:space="preserve">
    <value>Headless</value>
  </data>
  <data name="IgnoreEmptyLines" xml:space="preserve">
    <value>Ignora righe vuote</value>
  </data>
  <data name="IgnoreHttpsErrors" xml:space="preserve">
    <value>Ignora errori HTTPS</value>
  </data>
  <data name="IgnoreResponseErrors" xml:space="preserve">
    <value>Ignora errori nelle risposte</value>
  </data>
  <data name="InputDescription" xml:space="preserve">
    <value>Descrizione (domanda per l'utente)</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="InputsDescription" xml:space="preserve">
    <value>Gli input personalizzati sono un modo per definire alcuni valori direttamente durante l'esecuzione. L'utente della config riceverà dei popup quando comincia un job e le sue risposte saranno inserite come variabili di tipo stringa che puoi usare a tuo piacimento.</value>
  </data>
  <data name="Invert" xml:space="preserve">
    <value>Inverti</value>
  </data>
  <data name="LinesFromFile" xml:space="preserve">
    <value>Righe da file</value>
  </data>
  <data name="LoadOnlyDocumentAndScript" xml:space="preserve">
    <value>Carica solo documento e script</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Percorso</value>
  </data>
  <data name="LoopsAround" xml:space="preserve">
    <value>Riparti dall'inizio</value>
  </data>
  <data name="MaxUsesPerProxy" xml:space="preserve">
    <value>Massimi utilizzi per singolo proxy (0 è infinito)</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxy</value>
  </data>
  <data name="Puppeteer" xml:space="preserve">
    <value>Puppeteer</value>
  </data>
  <data name="PuppeteerCommandLineArguments" xml:space="preserve">
    <value>Argomenti della riga di comando (es. --disable-notifications --incognito)</value>
  </data>
  <data name="PuppeteerUserAgent" xml:space="preserve">
    <value>User Agent (predefinito se vuoto)</value>
  </data>
  <data name="QuitBrowserStatuses" xml:space="preserve">
    <value>Esci dal browser quando il bot termina con uno di questi stati</value>
  </data>
  <data name="RandomLinesFromFile" xml:space="preserve">
    <value>Righe casuali da file</value>
  </data>
  <data name="RandomUserAgent" xml:space="preserve">
    <value>User Agent Casuale</value>
  </data>
  <data name="RegexRule" xml:space="preserve">
    <value>Regola regex</value>
  </data>
  <data name="RegexToMatch" xml:space="preserve">
    <value>Regex da verificare</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Rimuovi</value>
  </data>
  <data name="ReportLastCaptchaOnRetry" xml:space="preserve">
    <value>Segnala l'ultimo captcha risolto se il bot termina con stato RETRY</value>
  </data>
  <data name="Requests" xml:space="preserve">
    <value>Richieste</value>
  </data>
  <data name="ResourceName" xml:space="preserve">
    <value>Nome risorsa</value>
  </data>
  <data name="Resources" xml:space="preserve">
    <value>Risorse</value>
  </data>
  <data name="RestoreDefaults" xml:space="preserve">
    <value>Ripristina Predefiniti</value>
  </data>
  <data name="RestoreDefaultSettingsConfirmation" xml:space="preserve">
    <value>Vuoi tornare alle impostazioni predefinite?</value>
  </data>
  <data name="SaveEmptyCaptures" xml:space="preserve">
    <value>Salva anche le catture vuote</value>
  </data>
  <data name="SimpleRule" xml:space="preserve">
    <value>Regola semplice</value>
  </data>
  <data name="SliceName" xml:space="preserve">
    <value>Nome della parte</value>
  </data>
  <data name="SuggestedBots" xml:space="preserve">
    <value>Numero di Bot suggerito</value>
  </data>
  <data name="ToggleRegexHelper" xml:space="preserve">
    <value>Mostra Aiutante Regex</value>
  </data>
  <data name="Unique" xml:space="preserve">
    <value>Solo righe uniche</value>
  </data>
  <data name="UrlEncodeAfterSlicing" xml:space="preserve">
    <value>Codifica dati per URL dopo averli divisi</value>
  </data>
  <data name="UseProxies" xml:space="preserve">
    <value>Usa i proxy</value>
  </data>
  <data name="VariableName" xml:space="preserve">
    <value>Nome della variabile</value>
  </data>
</root>