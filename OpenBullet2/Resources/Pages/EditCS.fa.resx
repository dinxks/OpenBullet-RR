<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>کنسل</value>
  </data>
  <data name="ConfirmConfigConversion" xml:space="preserve">
    <value>میخوای کانفیگ رو  به سی شارپ تبدیل کنید ، دیگر نمی توانید آن را با استکر ویرایش کنید! آیا واقعاً واقعاً مطمئن هستید؟</value>
  </data>
  <data name="ConvertToCSharpConfig" xml:space="preserve">
    <value>تبدیل کانفیگ به سی شارپ</value>
  </data>
  <data name="CSharpEditor" xml:space="preserve">
    <value>سی شارت ادیتور</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>این بخش برای چیست؟</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>این بخش دو هدف دارد. اگر قصد دارید از٪ استکر/ لولی کد٪ برای ساخت کانفیگ خود استفاده کنید ، می توانید از این ویرایشگر فقط خواندنی استفاده کنید تا ببینید کد نهایی پس از ترجمه بلوک ها به دستورالعمل های C# برای اجرا چگونه است این به شما کمک می کند تا بیشتر مواردی را که به دست می آورید حل کنید ، به ویژه هنگامی که٪ debugger٪ به شما٪ استثنا٪ می دهد.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>اگر در عوض تصمیم گرفتید کانفیگ خود را فقط با استفاده از٪ C#٪ کد کنید ، می توانید بر روی دکمه٪ Convert to C# کانفیگ٪ کلیک کنید و می توانید کد C# را به طور مستقیم ویرایش کنید. شما می توانید از همان API استفاده کنید که برای بلوک ها استفاده می شود ، بنابراین من پیشنهاد می کنم کمی آن را بررسی کنید یا کد پایگاه داده یا نحوه ترجمه خودکار بلوک ها را بررسی کنید. توجه داشته باشید که تنظیمات C# فقط برای٪ بسیار پیشرفته٪ کاربران در نظر گرفته شده است و همه کارهایی که می توانید در اینجا انجام دهید نیز می تواند در لولی کد با ادغام بلوک ها و کد C# انجام شود که می تواند اسکریپتی بسیار خواناتر را برای افرادی که تسلط کافی ندارند ایجاد کند. کد</value>
  </data>
  <data name="TranspileFromBlocks" xml:space="preserve">
    <value>از بلوک ها جابجا شوید</value>
  </data>
  <data name="WarningPleaseRead" xml:space="preserve">
    <value>هشدار لطفاً بخوانید!</value>
  </data>
</root>