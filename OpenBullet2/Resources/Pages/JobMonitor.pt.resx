<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Ações</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Executado sequencialmente</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Ativo</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Proxies Ativas</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Proxies Banidas</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Banimentos</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Créditos captcha</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Personalizados</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>dias</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Editar ação</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Editar gatilho</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Erros</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>Executando</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Execuções</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Falhas</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Como isso funciona?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Este é o %Monitorador de Trabalhos%, que contém uma lista de %ações disparadas%. Ações acionadas são responsáveis ​​por monitorar um trabalho, verificar se há acionadores e executar ações. Em primeiro lugar, você deve definir o %id% do trabalho a ser monitorado na caixa de texto numérica. Lembre-se de desmarcar a caixa de seleção %ativo% ao configurar os gatilhos e ações para evitar que sejam executados acidentalmente quando você ainda não terminou de usá-los.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Então você deve adicionar alguns %gatilhos% e %ações%. Assim que todas as condições de acionamento forem verdadeiras, o Monitorador de Trabalho executará todas as %ações% que você especificou em uma ordem sequencial até que sejam esgotadas. Depois de executar as ações, o contador de %Execuções% aumentará. Se a ação acionada for marcada como %repetível%, os acionadores serão correspondidos várias vezes, caso contrário, a ação acionada será definida como inativa e não acionará nunca mais.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>O botão %Reset% redefinirá o número de execuções para 0. Ações acionadas são salvas no arquivo %triggeredActions.json%, então se você quiser fazer backup ou transferi-las para outra instância de OB, você deve copiar este arquivo.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>horas</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>em trabalho</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Trabalho</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Trabalho finalizado</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Status de Trabalho</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minutos</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Novo</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>em webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progresso</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Recarregar proxies</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remover</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Remover Todos</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Repetível</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reiniciar</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Tentativas</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>segundos</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Selecione o tipo de ação</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Selecione o tipo de gatilho</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Enviar</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Definir bots para</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Defina o tempo relativo para</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Iniciar Trabalho</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Parar Trabalho</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Testado</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Tempo decorrido</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Tempo restante</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>Checar</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Gatilhos</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Todos devem ser verificados ao mesmo tempo</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Espere</value>
  </data>
</root>