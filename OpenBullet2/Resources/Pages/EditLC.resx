<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CSharpTip" xml:space="preserve">
    <value>TIP: You can write C# code inside LoliCode, it works!</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>What is LoliCode?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>%LoliCode% is a custom scripting language that acts as an %intermediate language% between blocks and the C# code that is generated from blocks. LoliCode can be converted into blocks by simply clicking on the Stacker section (whatever is not a proper block is moved to a special LoliCode Block), and blocks can be converted into LoliCode by simply clicking on the LoliCode section. Every block is automatically translated into a snippet that can be identified through its id.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>A great feature of LoliCode is that it can be used to integrate raw %C#% code with blocks. You can wrap blocks in `if` statements, declare variables and take advantage of the features of C# by using its original syntax. At the end of the day, blocks are also translated into C# code so you will end up with 100% C# code when you decide to run your config!</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>If you need to use classes etc. from a %namespace% that is not automatically imported by OB2 when compiling the script, you can add it at the top by clicking on the %Toggle Usings% button and writing them in the textbox. For example, to add the namespace for the `Regex` class you can type `System.Text.RegularExpressions` in a line of the textbox.</value>
  </data>
  <data name="Help1x04" xml:space="preserve">
    <value>The %startup% LoliCode editor is useful if you want to set up global variables at the start of a job (for example you could grab a cookie or read a file). Be careful though, the `data` variable will be wiped out, so remember to only store your data in the `globals` object!</value>
  </data>
  <data name="LoliCodeEditor" xml:space="preserve">
    <value>LoliCode Editor</value>
  </data>
  <data name="SaveScript" xml:space="preserve">
    <value>Save Script</value>
  </data>
  <data name="StartupEditorInfo" xml:space="preserve">
    <value>You can write a LoliCode script that will be executed when the job starts running</value>
  </data>
  <data name="ToggleStartupEditor" xml:space="preserve">
    <value>Toggle Startup Editor</value>
  </data>
  <data name="ToggleUsings" xml:space="preserve">
    <value>Toggle Usings</value>
  </data>
  <data name="UsingsInfo" xml:space="preserve">
    <value>You can type namespaces that you would like to import in the generated C# script, one per line</value>
  </data>
</root>