<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Agregar</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Agregado</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>¡El Diccionario se agregó correctamente!</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Agregar diccionario</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>¿Eliminar el archivo también?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>¿Estás seguro?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>¿Quieres eliminar?</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>¿del disco también?</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Editar diccionario</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Nombre de Archivo</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>¿Cómo funciona esto?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Aquí puede importar diccionarios. En primer lugar, haga clic en el botón %Agregar% de arriba. Podrá especificar un %Tipo de diccionario% (más información sobre esto más adelante), un %Nombre% y un %Propósito%. Tiene dos opciones para cargar su archivo. La primera opción es %cargarlo% en el servidor que está ejecutando la instancia de OpenBullet2. Este es el método preferido %si el diccionario está en el cliente% desde donde está accediendo a OB2 a través del navegador, pero OB2 está alojado en una máquina diferente. Este método de agregar un diccionario agregara una carga adicional, ya que el diccionario debe cargarse a través del navegador.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%Si el diccionario está en el servidor%, lo que significa que está intentando recuperar un archivo de la misma máquina en la que se está ejecutando OB2, puede usar la opción %Archivo de sistema%, que le permitirá navegar visualmente a través de carpetas en busca del archivo que desea. Tenga en cuenta que para acceder a ubicaciones en la unidad que están fuera del directorio de trabajo actual de OB2, deberá ir a las opciones de seguridad de OpenBullet y permitir el acceso a archivos en todo el sistema.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Con respecto al %Tipo de diccionario%, encontrará los Tipos de diccionarios especificados actualmente en el archivo % UserData / Environment.ini% en su directorio OB2. Los tipos de diccionarios se cargan cuando se inicia OB2. Puede cambiar este archivo y agregar / eliminar / cambiar los tipos de diccionarios para que coincidan con el formato de sus diccionarios. Puede leer más sobre los tipos de diccionarios en la sección de guías del foro oficial.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>No, mantener el archivo</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Lineas</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Cargando</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>No hay registros para mostrar</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Primero debes seleccionar un diccionario</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Propósito</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>¿De verdad quieres eliminar?</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>resultados</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Resultados por pagina</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
</root>