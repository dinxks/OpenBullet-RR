<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CSharpTip" xml:space="preserve">
    <value>TIP: Bạn có thể viết code C# ngay trong Lolicode, nó vận hành tốt!</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>LoliCode là gì?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>%LoliCode% là một ngôn ngữ lập trình tùy chỉnh mà có thể dùng dưới dạng một %ngôn ngữ trung gian% giữa các block và code C# được tạo từ các block. Lolicode có thể được chuyển đổi thành các block một cách đơn giản bằng cách click vào phần Stacker (bất cứ thứ gì không phải là block hợp lệ được chuyển tới một block Lolicode đặc biệt), và các block có thể chuyển đổi thành LoliCode một cách đơn giản bằng cách click vào phần LoliCode. Mọi block được dịch tự động thành từng mảnh để có thể được xác định qua id của nó.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Một tính năng tuyệt vời của LoliCode là nó có thể được dùng để tích hợp code %C#% thô với các block. Bạn có thể bọc các block trong các lệnh `if`, khai báo các biến và tận dụng các tính năng của C# bằng cách dùng cú pháp gốc của nó. Cuối cùng thì các blocks cũng được dịch thành code C# nên bạn sẽ có 100% C# ghi bạn chạy config!</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Nếu bạn càn dùng classes từ một %namespace% không được tự động tải bởi OB2 khi biên dịch code, bạn có thể thêm nó ở trên bằng cách click vào nút %Chuyển đổi Mục đích Sử dụng% và viết chúng vào trong hộp văn bản. Ví dụ, để thêm namespace cho class 'Regex' bạn có thể gõ `System.Text.RegularExpressions` vào một dòng trong hộp văn bản.</value>
  </data>
  <data name="LoliCodeEditor" xml:space="preserve">
    <value>Trình chỉnh sửa LoliCode</value>
  </data>
  <data name="SaveScript" xml:space="preserve">
    <value>Lưu Script</value>
  </data>
  <data name="ToggleUsings" xml:space="preserve">
    <value>Chuyển đổi Mục đích Sử dụng</value>
  </data>
  <data name="UsingsInfo" xml:space="preserve">
    <value>Bạn có thể gõ các namespace mà bạn muốn tải nhập vào scripted C# đã tạo, một cái một dòng.</value>
  </data>
</root>