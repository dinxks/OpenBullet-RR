<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Toevoegen</value>
  </data>
  <data name="AddBlank" xml:space="preserve">
    <value>Lege toevoegen</value>
  </data>
  <data name="AllowedProxyTypes" xml:space="preserve">
    <value>Toegestane proxy typen</value>
  </data>
  <data name="AllowedWordlistTypes" xml:space="preserve">
    <value>Toegestane wordlist typen</value>
  </data>
  <data name="AlwaysOpenBrowser" xml:space="preserve">
    <value>Open altijd de browser aan het begin</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Weet je het zeker?</value>
  </data>
  <data name="BanLoopEvasion" xml:space="preserve">
    <value>Ban loop ontwijking, oftewel na hoeveel BAN statussen de datalijn moet worden gemarkeerd als TOCHECK en de proxy moet worden geblokkeerd (0 om uit te schakelen)</value>
  </data>
  <data name="BanStatuses" xml:space="preserve">
    <value>Ban de proxy wanneer de bot eindigt met een van deze statussen</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuleer</value>
  </data>
  <data name="CaseSensitive" xml:space="preserve">
    <value>Hoofdlettergevoelig</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Legen</value>
  </data>
  <data name="ContinueStopStatuses" xml:space="preserve">
    <value>Statussen waarvoor de bot doorgaat / stopt</value>
  </data>
  <data name="CPMLimit" xml:space="preserve">
    <value>CPM Limiet (0 voor geen limiet)</value>
  </data>
  <data name="CustomInputs" xml:space="preserve">
    <value>Aangepaste ingangen</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Gegevens</value>
  </data>
  <data name="DataRules" xml:space="preserve">
    <value>Gegevens Regels</value>
  </data>
  <data name="DefaultAnswer" xml:space="preserve">
    <value>Standaard antwoord</value>
  </data>
  <data name="DisableWebpagesNotifications" xml:space="preserve">
    <value>Schakel meldingen van webpagina's uit</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>Algemeen</value>
  </data>
  <data name="Headless" xml:space="preserve">
    <value>Headless</value>
  </data>
  <data name="IgnoreHttpsErrors" xml:space="preserve">
    <value>Negeer HTTPS fouten</value>
  </data>
  <data name="IgnoreResponseErrors" xml:space="preserve">
    <value>Negeer antwoordfouten</value>
  </data>
  <data name="InputDescription" xml:space="preserve">
    <value>Beschrijving (vraag voor de gebruiker)</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Invoer</value>
  </data>
  <data name="InputsDescription" xml:space="preserve">
    <value>Aangepaste invoer is een manier om sommige waarden direct tijdens runtime te definiëren. De gebruikers van de config zullen een aantal pop-ups krijgen wanneer ze een taak starten en hun antwoord zal worden ingevoegd als een variabele van het type string die je kunt gebruiken zoals je wilt.</value>
  </data>
  <data name="Invert" xml:space="preserve">
    <value>Omkeren</value>
  </data>
  <data name="MaxUsesPerProxy" xml:space="preserve">
    <value>Maximaal gebruik per proxy (0 is oneindig)</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxy's</value>
  </data>
  <data name="Puppeteer" xml:space="preserve">
    <value>Poppenspeler</value>
  </data>
  <data name="PuppeteerCommandLineArguments" xml:space="preserve">
    <value>Command line argumenten (bijv. --disable-notifications --incognito)</value>
  </data>
  <data name="PuppeteerUserAgent" xml:space="preserve">
    <value>User Agent (standaard indien leeg)</value>
  </data>
  <data name="QuitBrowserStatuses" xml:space="preserve">
    <value>Sluit de browser wanneer de bot eindigt met een van deze statussen</value>
  </data>
  <data name="RandomUserAgent" xml:space="preserve">
    <value>Willekeurige User Agent</value>
  </data>
  <data name="RegexRule" xml:space="preserve">
    <value>Regex regel</value>
  </data>
  <data name="RegexToMatch" xml:space="preserve">
    <value>Regex die overeenkomt</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Verwijderen</value>
  </data>
  <data name="Requests" xml:space="preserve">
    <value>Verzoeken</value>
  </data>
  <data name="RestoreDefaults" xml:space="preserve">
    <value>Herstel standaardinstellingen</value>
  </data>
  <data name="RestoreDefaultSettingsConfirmation" xml:space="preserve">
    <value>Wilt u de standaardinstellingen herstellen?</value>
  </data>
  <data name="SaveEmptyCaptures" xml:space="preserve">
    <value>Sla ook lege opnames op</value>
  </data>
  <data name="SimpleRule" xml:space="preserve">
    <value>Eenvoudige regel</value>
  </data>
  <data name="SliceName" xml:space="preserve">
    <value>Segment naam</value>
  </data>
  <data name="SuggestedBots" xml:space="preserve">
    <value>Aanbevolen aantal bots</value>
  </data>
  <data name="ToggleRegexHelper" xml:space="preserve">
    <value>Schakel Regex Helper in</value>
  </data>
  <data name="UrlEncodeAfterSlicing" xml:space="preserve">
    <value>URL Codeer gegevens na het snijden</value>
  </data>
  <data name="UseProxies" xml:space="preserve">
    <value>Gebruik proxy's</value>
  </data>
  <data name="VariableName" xml:space="preserve">
    <value>Variabele naam</value>
  </data>
</root>