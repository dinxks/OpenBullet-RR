<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllDone" xml:space="preserve">
    <value>Tudo feito!</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Tem certeza?</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Criador</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>de</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="CannotDownloadRemoteConfig" xml:space="preserve">
    <value>Não pode baixar configurações remotas</value>
  </data>
  <data name="CannotEditRemoteConfig" xml:space="preserve">
    <value>Não pode editar configurações remotas</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Categoria</value>
  </data>
  <data name="ConfigReloadWarning" xml:space="preserve">
    <value>Isso recarregará todas as configurações do disco, de modo que todas as alterações não salvas serão perdidas. Você quer prosseguir?</value>
  </data>
  <data name="ConfigsSuccessfullyUploaded" xml:space="preserve">
    <value>Configurações carregadas com sucesso</value>
  </data>
  <data name="ConfigWarningMessage" xml:space="preserve">
    <value>AVISO! Configurações contendo codigo C# é executado sem nenhuma verificação automática de comportamento malicioso. Se você usar configurações feitas por terceiros, é SUA responsabilidade garantir que as configurações façam exatamente o que devem fazer e que nada de obscuro esteja acontecendo. Sempre é recomendado verificar o codigo LoliScript/C# Antes de executá-los.</value>
  </data>
  <data name="CreationDate" xml:space="preserve">
    <value>Data de criação</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Excluir</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>O que é uma Config?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Um %Config% é um arquivo que contem instuções para automatizar certas ações, geralmente para recursos da web. As configs contêm alguns %metadata% (como um nome, um autor e um ícone), um %readme% com instruções sobre como usá-lo ou para que serve, algumas configurações e instruções que podem estar no %LoliCode% personalizado ou em %C#% puro. No disco, as configurações são salvas como arquivos com a extensão %.opk% na subpasta %UserData/Configs%.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>As configs podem ser usadas em trabalhos com %Multiplas Threads% para executar algumas instruções em um determinado conjunto de dados (por exemplo, uma Wordlist) em paralelo. Por exemplo eles podem ser usados para verificar se certos subcaminhos de um determinado site retornam uma resposta válida ou podem ser usados para raspar links de várias páginas de uma loja online.</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Como funciona o gerenciador de Configs?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>O %Gerenciador de Configs% mantém o controle de todas as suas configurações. As configs são carregadas da subpasta `UserData/Configs` quando o OB2 é inicializado e se alguma nova config for adicionada a essa pasta, você pode simplesmente clicar em %Recarregar% para iniciar o processo de carregamento novamente. Se você não tiver acesso fácil á pasta Configs(por exemplo se o OB2 estiver sendo executado em uma vps), você pode %Upload% a config com um botão relacionado. Você também pode fazer o %Download% de configurações existentes da mesma maneira.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>No topo você pode encontrar o botão %Novo% que irá criar uma nova configuração. A fim de %Editar% uma configuração você pode clicar no botão Editar ou clicar duas vezes na configuração na lista. Há também um botão para %Mudar o tipo de Visualização% para um tipo de grade mais detalhada.</value>
  </data>
  <data name="Help3x00" xml:space="preserve">
    <value>O que é um arquivo .opk?</value>
  </data>
  <data name="Help3x01" xml:space="preserve">
    <value>Um %.opk% arquivo é um %Arquivo .zip% que contém alguns arquivos dentro dele. O primeiro arquivo é %metadata.json%, que contém o nome, autor e ícone da configuração. O ícone é uma imagem codificada em base64 que também pode ser um GIF. O arquivo %readme.md% conterá uma descrição da configuração, que será mostrada ao usuário quando ele abrir o menu de seleção de configuração durante o processo de configuração do trabalho. Suporta a linguagem markdown. O arquivo %settings.json% conterá as configuração da Config.</value>
  </data>
  <data name="Help3x02" xml:space="preserve">
    <value>Finalmente, se sua configuração usa o stacker, as instruções serão salvas como um script LoliCode dentro do arquivo %script.loli%. Se, em vez disso, você decidir converter sua configuração para apenas C#, um arquivo chamado %script.cs% será criado com o código C# para ser executado.</value>
  </data>
  <data name="LastModified" xml:space="preserve">
    <value>Ultima Modificação</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Carregando</value>
  </data>
  <data name="LocalConfigs" xml:space="preserve">
    <value>Configurações Locais</value>
  </data>
  <data name="MissingPlugin" xml:space="preserve">
    <value>Plug-in não foi encontrado</value>
  </data>
  <data name="MissingPluginText" xml:space="preserve">
    <value>A configuração foi construída com este plugin, mas está faltando.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Novo</value>
  </data>
  <data name="NoConfigSelectedWarning" xml:space="preserve">
    <value>Parece que você não selecionou nenhuma configuração!</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxies</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Você realmente quer deletar?</value>
  </data>
  <data name="Reload" xml:space="preserve">
    <value>Recarregar</value>
  </data>
  <data name="Remote" xml:space="preserve">
    <value>Remoto</value>
  </data>
  <data name="RemoteConfig" xml:space="preserve">
    <value>Config remota</value>
  </data>
  <data name="RemoteConfigs" xml:space="preserve">
    <value>Configs Remotas</value>
  </data>
  <data name="ToggleView" xml:space="preserve">
    <value>Mudar Visualização</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="UnsavedChanges" xml:space="preserve">
    <value>Mudanças não salvas</value>
  </data>
  <data name="UnsavedChangesText" xml:space="preserve">
    <value>A configuração atual tem alterações não salvas! Continuar mesmo assim?</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Enviar</value>
  </data>
  <data name="WARNING" xml:space="preserve">
    <value>AVISO</value>
  </data>
  <data name="Wordlists" xml:space="preserve">
    <value>Wordlists</value>
  </data>
</root>