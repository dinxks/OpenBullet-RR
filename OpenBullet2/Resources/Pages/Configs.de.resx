<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllDone" xml:space="preserve">
    <value>Fertig</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>wirklich sicher?</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Autor</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>von</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Abbruch</value>
  </data>
  <data name="CannotDownloadRemoteConfig" xml:space="preserve">
    <value>Kann eine Remote Config nicht herunterladen</value>
  </data>
  <data name="CannotEditRemoteConfig" xml:space="preserve">
    <value>Kann eine Remote Config nicht bearbeiten</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="ConfigReloadWarning" xml:space="preserve">
    <value>Dies wird alle Configs neu von der Disk einlesen. Ungespeicherte Änderungen gehen verloren. Wirklich fortfahren?</value>
  </data>
  <data name="ConfigsSuccessfullyUploaded" xml:space="preserve">
    <value>Configs erfolgreich raufgeladen</value>
  </data>
  <data name="ConfigWarningMessage" xml:space="preserve">
    <value>WARNUNG! Configs enthalten C#-Code, der ohne automatische Überprüfung auf bösartige Verhaltensweisen ausgeführt wird. Wenn du Configs von Drittanbietern verwendest, liegt es in DEINER Verantwortung, sicherzustellen, dass die Configs genau das tun, was sie tun sollen und dass nichts Zwielichtiges vor sich geht. Überprüfe den LoliCode / C#-Code immer selbst, bevor du ihn ausführst, falls du der Quelle nicht vollständig vertraust.</value>
  </data>
  <data name="CreationDate" xml:space="preserve">
    <value>Ersellungsdatum</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Herunterladen</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Was ist eine Config?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Eine %Config% ist eine Datei, die Anweisungen für die Automatisierung bestimmter Aktionen enthält, normalerweise in Verbindung zu Webressourcen. Configs enthalten einige %Metadaten% (wie z.B. einen Namen, einen Autor und ein Icon), eine %LiesMich% mit Anweisungen, wie man sie benutzt oder wofür sie da ist, einige Einstellungen und dann Anweisungen, die entweder in der benutzerdefinierten %LoliCode% Skriptsprache oder in reinem %C#% sein können. Auf der Festplatte werden die Configs als Dateien mit der Erweiterung %.opk% im Unterordner %UserData/Configs% gespeichert.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Configs können in Jobs wie dem %MultiRun Job% verwendet werden, um einige Anweisungen auf einem gegebenen Datensatz (z.B. einer Wordlist) parallel auszuführen. Zum Beispiel können sie verwendet werden, um zu prüfen, ob bestimmte Unterpfade einer gegebenen Webseite eine gültige Antwort zurückgeben, oder sie können verwendet werden, um Links von mehreren Seiten eines Onlineshops zu sammeln.</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Wie funktioniert der Config Manager?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>Der %Config Manager% behält den Überblick über alle deine Configs. Configs werden aus dem `UserData/Configs`-Unterordner geladen, wenn OB2 startet. Wenn neue Configs zu diesem Ordner hinzugefügt werden, kannst du einfach %Neu Laden% drücken, um den Ladeprozess erneut zu starten. Wenn du keinen einfachen Zugriff auf den Configs-Ordner hast (z.B. wenn OB2 auf einem VPS läuft), kannst du eine Config mit dem entsprechenden Button %Hochladen% raufladen Auf die gleiche Art und Weise kannst du auch bestehender Configs %Herunterladen%.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>Oben findest du den %Neu% Button, mit dem du eine neue Konfiguration erstellen kannst. Um eine Konfiguration zu %bearbeiten%, kannst du auf den Bearbeiten-Button klicken oder einen Doppelklick auf die Konfiguration in der Liste machen. Es gibt auch einen Button zum %Ansicht umschalten% zu einer detaillierteren Gitteransicht.</value>
  </data>
  <data name="Help3x00" xml:space="preserve">
    <value>Was ist eine .opk Datei?</value>
  </data>
  <data name="Help3x01" xml:space="preserve">
    <value>Eine %.opk% Datei ist ein %zip Archiv%, das einige Dateien in sich enthält. Die erste Datei ist %metadata.json%, die den Namen, den Autor und das Icon der Config enthält. Das Icon ist ein base64-encodiertes Bild, das auch ein GIF sein kann. Die %readme.md% Datei enthält eine Beschreibung der Config, sie wird dem Benutzer angezeigt, wenn er das Config-Auswahlmenü während des Job-Setup-Prozesses öffnet. Sie unterstützt die Markdown-Sprache. Die %settings.json% Datei enthält die config-spezifischen Einstellungen.</value>
  </data>
  <data name="Help3x02" xml:space="preserve">
    <value>Wenn deine Konfiguration Stacker verwendet, werden die Anweisungen als LoliCode-Skript in der Datei %script.loli% gespeichert. Wenn du dich stattdessen entschieden hast, deine Konfiguration in C# zu konvertieren, wird eine Datei namens %script.cs% mit dem auszuführenden C# Code erstellt.</value>
  </data>
  <data name="LastModified" xml:space="preserve">
    <value>Zuletzt geändert</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Lade</value>
  </data>
  <data name="LocalConfigs" xml:space="preserve">
    <value>Local configs</value>
  </data>
  <data name="MissingPlugin" xml:space="preserve">
    <value>Fehlendes Plugin</value>
  </data>
  <data name="MissingPluginText" xml:space="preserve">
    <value>Die Config wurde mit diesem Plugin gebaut, aber es ist nicht vorhanden</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Neu</value>
  </data>
  <data name="NoConfigSelectedWarning" xml:space="preserve">
    <value>Es wurde keine Config ausgewählt!</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxies</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Wirklich löschen?</value>
  </data>
  <data name="Reload" xml:space="preserve">
    <value>Neu Laden</value>
  </data>
  <data name="Remote" xml:space="preserve">
    <value>Remote</value>
  </data>
  <data name="RemoteConfig" xml:space="preserve">
    <value>Remote Config</value>
  </data>
  <data name="RemoteConfigs" xml:space="preserve">
    <value>Remote Configs</value>
  </data>
  <data name="ToggleView" xml:space="preserve">
    <value>Ansicht umschalten</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="UnsavedChanges" xml:space="preserve">
    <value>Ungesicherte Änderungen</value>
  </data>
  <data name="UnsavedChangesText" xml:space="preserve">
    <value>Die aktuelle Config hat ungespeicherte Änderungen! Trotzdem fortfahren?</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Hochladen</value>
  </data>
  <data name="WARNING" xml:space="preserve">
    <value>WARNUNG</value>
  </data>
  <data name="Wordlists" xml:space="preserve">
    <value>Wordlists</value>
  </data>
</root>