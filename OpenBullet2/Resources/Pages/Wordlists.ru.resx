<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Добавить</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Добавлено</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>Список слов был успешно добавлен!</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Добавить список слов</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>Удалить файл тоже?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Вы уверены?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Отмена</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>Хотите ли вы удалить</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>с диска?</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Редактировать</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Редактирование списка слов</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Имя файла</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Как это работает?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Здесь вы можете импортировать списки слов. Прежде всего, нажмите на кнопку %Добавить%. Вы сможете указать тип %Wordlist Type% (подробнее об этом позже), %Name% и %Purpose%. У вас есть два варианта загрузки файла. Первый вариант - %загрузить% его на сервер, на котором запущен экземпляр OpenBullet2. Это предпочтительный метод %если список слов находится на клиенте%, с которого вы получаете доступ к OB2 через браузер, но OB2 размещен на другой машине. Этот метод добавления списка слов добавляет некоторые накладные расходы, поскольку список слов должен быть загружен через браузер.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%Если список слов находится на сервере%, то есть вы пытаетесь получить файл с той же машины, на которой запущен OB2, вы можете использовать опцию %File System%, которая позволит вам визуально просматривать папки в поисках нужного файла. Обратите внимание, что для доступа к местам на диске, которые находятся за пределами текущего рабочего каталога OB2, вам необходимо перейти к параметрам безопасности OpenBullet и разрешить общесистемный доступ к файлам.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Что касается %Wordlist Type%, вы найдете указанные в данный момент типы Wordlist Types в файле %UserData/Environment.ini% в вашем каталоге OB2. Типы списков слов загружаются при запуске OB2. Вы можете изменить этот файл и добавить/удалить/изменить типы списков слов, чтобы они соответствовали формату ваших списков слов. Вы можете прочитать больше о типах списков слов в разделе руководств на официальном форуме.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>Нет, сохраните файл</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Линии</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Загрузка</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Имя</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Нет записей для отображения</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Сначала необходимо выбрать список слов</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Владелец</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Назначение</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Вы действительно хотите удалить</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>результаты</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Результаты на страницу</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Тип</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value></value>
  </data>
  <data name="WordlistInUse" xml:space="preserve">
    <value>Этот список слов используется выполняющимся заданием, пожалуйста, прервите или удалите его до того, как</value>
  </data>
</root>