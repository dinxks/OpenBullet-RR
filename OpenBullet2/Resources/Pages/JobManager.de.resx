<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bots" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>von</value>
  </data>
  <data name="Clone" xml:space="preserve">
    <value>Klonen</value>
  </data>
  <data name="Combinations" xml:space="preserve">
    <value>Kombinationen</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Custom" xml:space="preserve">
    <value>Benutzerdefiniert</value>
  </data>
  <data name="DataPool" xml:space="preserve">
    <value>Datenpool</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>Datei</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Wie funktioniert das?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Dies ist der %Job Manager%, hier kannst du %neue% Jobs erstellen, %vorhandene %Jobs% bearbeiten oder %entfernen% und auf die Schnittstelle eines bestimmten Jobs zugreifen. Um einen neuen Job zu erstellen, klicke auf den %Neu% Button oben. Nachdem du einige Jobs erstellt hast, kannst du auf dieser Seite eine Übersicht über ihren Status sehen. Du kannst auch einen Job erstellen, indem du einen bestehenden klonst, um Zeit bei den Konfigurationsaufgaben zu sparen.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Um auf das Interface eines bestimmten Jobs zuzugreifen, kannst du ihn einfach anklicken! Wenn du möchtest, dass der Manager den Status deiner Jobs weniger häufig aktualisiert, um Bandbreite zu sparen, findest du die Option %Job Manager Aktualisierungsintervall% auf der Seite OB Einstellungen.
Um auf das Interface eines bestimmten Jobs zuzugreifen, kannst du ihn einfach anklicken! Wenn du möchtest, dass der Manager den Status deiner Jobs weniger häufig aktualisiert, um Bandbreite zu sparen, findest du die Option %Job Manager Aktualisierungsintervall% auf der Seite OB Settings.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Treffer</value>
  </data>
  <data name="Infinite" xml:space="preserve">
    <value>Unendlich</value>
  </data>
  <data name="JobNotIdle" xml:space="preserve">
    <value>Job nicht untätig</value>
  </data>
  <data name="JobNotIdleWarning" xml:space="preserve">
    <value>Vor dem Löschen eines Jobs bitte diesen anhalten oder abbrechen</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Neu</value>
  </data>
  <data name="NoConfigSelected" xml:space="preserve">
    <value>Keine Config ausgewählt</value>
  </data>
  <data name="NotWorking" xml:space="preserve">
    <value>Nicht funktionierende</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Fortschritt</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxies</value>
  </data>
  <data name="Range" xml:space="preserve">
    <value>Bereich</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Alle Entfernen</value>
  </data>
  <data name="SelectJobType" xml:space="preserve">
    <value>Art des Jobs auswählen</value>
  </data>
  <data name="ToCheck" xml:space="preserve">
    <value>Zur Überprüfung</value>
  </data>
  <data name="Wordlist" xml:space="preserve">
    <value>Wordlist</value>
  </data>
  <data name="Working" xml:space="preserve">
    <value>Funktionierende</value>
  </data>
</root>