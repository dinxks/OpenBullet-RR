<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessExpiration" xml:space="preserve">
    <value>Vencimiento del acceso</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Agregar</value>
  </data>
  <data name="AddGuest" xml:space="preserve">
    <value>Agregar invitado</value>
  </data>
  <data name="AllowedAddresses" xml:space="preserve">
    <value>Direcciones permitidas</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>¿Estás seguro?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="EditGuest" xml:space="preserve">
    <value>Editar invitado</value>
  </data>
  <data name="EditInfo" xml:space="preserve">
    <value>Editar info</value>
  </data>
  <data name="EditPassword" xml:space="preserve">
    <value>Editar Contraseña</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>¿Cómo funciona esto?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>OpenBullet 2 le permite crear cuentas para %invitados% que pueden acceder a su servidor OpenBullet 2. En primer lugar, recuerde activar la opción %requiere inicio de administrador% en los %ajustes de seguridad de OB%. Esto garantizará que las personas con el enlace a este servidor serán recibidas con una pantalla de inicio de sesión. Para que otras personas accedan a este servidor, necesitará %abrir los puertos% en su router/rauter y configurar las %reglas de firewall% en su máquina. Por lo general, esto ya está hecho en un VPS, que es la forma sugerida de alojar la instalación de OpenBullet 2 para uso público.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>En los %ajustes de seguridad%, también podrá definir el %tiempo de vida% de la sesión de invitado, que es la cantidad de horas después de las cuales se les pedirá a los invitados que inicien sesión nuevamente. Esto es útil ya que es posible que no desee que los invitados tengan acceso indefinido al servidor. Tenga en cuenta que una vez que el servidor generó un %token% válido para el invitado, será válido hasta que expire, por lo que incluso si elimina un invitado de la tabla anterior, podrá usar su instalación de OpenBullet 2 durante el tiempo que el token  sea válido.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Al hacer clic en el botón %Agregar% de arriba, podrá crear %credenciales de inicio de sesión% para el nuevo invitado, establecer el %vencimiento del acceso% (después de lo cual el servidor ya no enviará un token válido al invitado) y opcionalmente Configure un número de %direcciones IP% desde las que el invitado puede conectarse. Esto es útil para evitar que los invitados compartan su cuenta con otras personas.</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Cargando</value>
  </data>
  <data name="NewPasswordForGuest" xml:space="preserve">
    <value>Nueva contraseña para invitado</value>
  </data>
  <data name="NoGuestSelectedWarning" xml:space="preserve">
    <value>Debes seleccionar un invitado primero</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>No hay registros para mostrar</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>¿De verdad quieres eliminar?</value>
  </data>
  <data name="DeleteEverything" xml:space="preserve">
    <value>¿De verdad quieres eliminar?</value>
  </data>
  <data name="DeleteEverythingMessage" xml:space="preserve">
    <value>¿De verdad quieres borrar todo?</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>resultados</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Resultado por pagina</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Usuario</value>
  </data>
</root>
