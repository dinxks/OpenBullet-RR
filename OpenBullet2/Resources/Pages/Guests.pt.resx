<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessExpiration" xml:space="preserve">
    <value>Acesso expira em</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Adicionar</value>
  </data>
  <data name="AddGuest" xml:space="preserve">
    <value>Adicionar convidado</value>
  </data>
  <data name="AllowedAddresses" xml:space="preserve">
    <value>Endereços permitidos</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Tem certeza?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Excluir</value>
  </data>
  <data name="EditGuest" xml:space="preserve">
    <value>Editar convidado</value>
  </data>
  <data name="EditInfo" xml:space="preserve">
    <value>Editar Informações</value>
  </data>
  <data name="EditPassword" xml:space="preserve">
    <value>Editar Senha</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Como isso funciona?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>O OpenBullet 2 permite que você crie contas para %convidados% que podem acessar seu servidor OpenBullet 2. Em primeiro lugar, lembre-se de ativar a opção %pedir login administrador% nas %configurações de segurança% do OB. Isso garantirá que as pessoas com o link para este servidor sejam recebidas com uma tela de login. Para que outras pessoas acessem este servidor, você precisará %abrir as portas% em seu roteador e configurar as %regras de firewall% em sua máquina. Isso geralmente já é feito para você em um VPS, que é a maneira sugerida de hospedar uma instalação do OpenBullet 2 exposta publicamente.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Nas %configurações de segurança% você também será capaz de definir a %duração da sessão de convidado%, que é a quantidade de horas após as quais os hóspedes serão solicitados a fazer o login novamente. Isso é útil porque você pode não querer que os convidados tenham acesso indefinido ao servidor. Observe que uma vez que o servidor gerou um %token% válido para o convidado, ele será válido até que expire, então mesmo se você excluir um convidado da tabela acima, ele poderá usar a instalação do OpenBullet 2 enquanto o token é válido, %você também pode bloquear endereços IP nas configurações%.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Ao clicar no botão %Adicionar% acima, você será capaz de criar %credenciais de login% para o novo convidado, definir a %expiração de acesso% (após o qual o servidor não enviará mais um token válido para o convidado) e opcionalmente configurar um número de %endereços IP% dos quais o convidado pode se conectar. Isso é útil para evitar que convidados compartilhem suas contas com outras pessoas.</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Carregando</value>
  </data>
  <data name="NewPasswordForGuest" xml:space="preserve">
    <value>Nova senha para um convidado</value>
  </data>
  <data name="NoGuestSelectedWarning" xml:space="preserve">
    <value>Você deve selecionar um convidado primeiro</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Não há registros a serem exibidos</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Você realmente quer deletar?</value>
  </data>
  <data name="DeleteEverything" xml:space="preserve">
    <value>Você realmente deseja deletar?</value>
  </data>
  <data name="DeleteEverythingMessage" xml:space="preserve">
    <value>Você realmente deseja deletar tudo?</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>Resultados</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Resultados por pagina</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Nome de usuário</value>
  </data>
</root>