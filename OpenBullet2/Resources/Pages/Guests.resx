<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessExpiration" xml:space="preserve">
    <value>Access expiration</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddGuest" xml:space="preserve">
    <value>Add guest</value>
  </data>
  <data name="AllowedAddresses" xml:space="preserve">
    <value>Allowed addresses</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="EditGuest" xml:space="preserve">
    <value>Edit guest</value>
  </data>
  <data name="EditInfo" xml:space="preserve">
    <value>Edit Info</value>
  </data>
  <data name="EditPassword" xml:space="preserve">
    <value>Edit Password</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>How does this work?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>OpenBullet 2 allows you to create accounts for %guests% that can access your OpenBullet 2 server. First of all, remember to turn on the %require admin login% option in OB's %security settings%. This will guarantee that people with the link to this server will be welcomed with a login screen. In order for other people to reach this server, you will need to %open the ports% on your router and setup the %firewall rules% on your machine. This is usually already done for you on a VPS, which is the suggested way to host a publicly exposed OpenBullet 2 installation.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>In the %security settings% you will also be able to define the %guest session lifetime%, which is the amount of hours after which guests will be prompted to login once more. This is useful as you might not want guests to have indefinite access to the server. Note that once the server generated a valid %token% for the guest, it will be valid until it expired, so even if you delete a guest from the table above, it will be able to use your OpenBullet 2 installation for as long as the token is valid.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>By clicking on the %Add% button above, you will be able to create %login credentials% for the new guest, set the %access expiration% (after which the server won't send a valid token to the guest anymore) and optionally set up a number of %IP addresses% which the guest is allowed to connect from. This is useful to prevent guests from sharing their account with other people.</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="NewPasswordForGuest" xml:space="preserve">
    <value>New password for guest</value>
  </data>
  <data name="NoGuestSelectedWarning" xml:space="preserve">
    <value>You must select a guest first</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>No records to display</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Do you really want to delete</value>
  </data>
   <data name="DeleteEverything" xml:space="preserve">
    <value>Do you really want to delete</value>
  </data>
  <data name="DeleteEverythingMessage" xml:space="preserve">
    <value>Do you really want to delete everything</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>results</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Results per page</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
</root>
