<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Hinzufügen</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Hinzugefügt</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>Die Wordlist wurde erfolgreich hinzugefügt!</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Wordlist hinzufügen</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>Auch die Datei löschen?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Wirklich sicher?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Abbruch</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>Soll die Wordlist</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>auch von der Disk gelöscht werden?</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Wordlist bearbeiten</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Dateiname</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Wie funktioniert das?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Hier kannst du Wortlisten importieren. Klicke zuerst auf den %Hinzufügen% Button oben. Es kann nun eine %Wordlist Art% (mehr Informationen dazu später), ein %Name% und ein %Zweck% angegeben werden. Du hast zwei Optionen, um deine Datei hochzuladen. Die erste Option ist, sie auf den Server %hochzuladen%, auf dem die Instanz von OpenBullet2 läuft. Dies ist die bevorzugte Methode, %falls sich die Wordlist auf dem Client% befindet, von dem aus du über den Browser auf OB2 zugreifst, aber OB2 auf einer anderen Maschine gehostet wird. Diese Methode fügt einen gewissen Overhead hinzu, da die Wordlist über den Browser hochgeladen werden muss.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%Wenn sich die Wortliste auf dem Server% befindet, was bedeutet, dass du versuchst, eine Datei von demselben Rechner abzurufen, auf dem OB2 läuft, kannst du die Option %Dateisystem% verwenden, mit der du visuell durch Ordner auf der Suche nach der gewünschten Datei stöbern kannst. Beachte, dass du, um auf Orte auf dem Laufwerk zuzugreifen, die außerhalb des aktuellen Arbeitsverzeichnisses von OB2 liegen, in die Sicherheitsoptionen von OpenBullet gehen und den systemweiten Dateizugriff erlauben musst.
%Wenn sich die Wortliste auf dem Server% befindet, was bedeutet, dass du versuchst, eine Datei von demselben Rechner abzurufen, auf dem OB2 läuft, kannst du die Option %Dateisystem% verwenden, mit der du visuell durch Ordner auf der Suche nach der gewünschten Datei blättern kannst. Beachte, dass du, um auf Orte auf dem Laufwerk zuzugreifen, die außerhalb des aktuellen Arbeitsverzeichnisses von OB2 liegen, in die Sicherheitsoptionen von OpenBullet gehen und den systemweiten Dateizugriff erlauben musst.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Was den %Wordlist Art% betrifft, so findest du die aktuell eingestellten Wordlist Arten in der %UserData/Environment.ini% Datei in deinem OB2 Verzeichnis. Die Wortlisten-Arten werden geladen, wenn der OB2 startet. Du kannst diese Datei ändern und Wordlist Types hinzufügen/entfernen/ändern, um sie an das Format deiner Wordlists anzupassen. Du kannst mehr über Wordlist Arten im offiziellen Forum in der Guides Sektion lesen.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>Nein, die Datei behalten</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Zeilen</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Laden</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Keine anzuzeigenden Datensätze</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Es muss erst eine Wordlist ausgewählt werden</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Zweck</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Wirklich löschen?</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>Ergebnisse</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Ergebnisse pro Seite</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Art</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
</root>