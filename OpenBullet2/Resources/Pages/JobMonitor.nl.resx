<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Acties</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Opeenvolgend uitgevoerd</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Actief</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Levend proxy's</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Verboden proxy's</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Verboden</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Captcha tegoed</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Customs</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>dagen</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Actie bewerken</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Bewerk Trigger</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Fouten</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>Uitvoeren</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Uitvoeringen</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Mislukt</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Hoe werkt dit?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Dit is de %Taak Monitor%, die een lijst met %geactiveerde acties% bevat. Triggered Actions zijn verantwoordelijk voor het bewaken van een taak, het controleren op triggers en het uitvoeren van acties. Allereerst moet u het %id% van de te controleren taak in het numerieke tekstvak definiëren. Vergeet niet om het selectievakje %actief% uit te schakelen bij het instellen van de triggers en acties om te voorkomen dat ze per ongeluk worden uitgevoerd als u er nog niet mee klaar bent.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Dan moet u enkele %triggers% en %acties% toevoegen. Zodra alle activeringsvoorwaarden zijn voldaan, voert de Taak Monitor alle %acties% die u hebt opgegeven in een opeenvolgende volgorde uit totdat ze klaar zijn. Na het uitvoeren van de acties zal de %executions% teller toenemen. Als de getriggerde actie is gemarkeerd als %herhaalbaar%, zullen triggers meerdere keren overeenkomen, anders zal de getriggerde actie zichzelf instellen als inactief en nooit meer worden geactiveerd.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>De %Reset% knop zal het aantal uitvoeringen terugzetten naar 0. Getriggerde acties worden opgeslagen in het %triggeredActions.json% bestand, dus als je er een back-up van wilt maken of ze naar een andere OB-instantie wilt overbrengen, moet je dit bestand kopiëren.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>uren</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>in taak</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Taak</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Taak klaar</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Taak status</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minuten</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nieuw</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>op webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Vooruitgang</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Herlaad proxy's</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Verwijder</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Verwijder alles</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Herhaalbaar</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Nieuwe pogingen</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>seconden</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Selecteer actietype</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Selecteer triggertype</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Stuur</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Stel bots in op</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Stel de relatieve tijd in op</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Start Taak</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Stop Taak</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Getest</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Tijd verstreken</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Overgebleven tijd</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>Om te controleren</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Triggers</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Ze moeten allemaal tegelijkertijd worden geverifieerd</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Wacht</value>
  </data>
</root>