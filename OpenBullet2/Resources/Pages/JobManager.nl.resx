<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bots" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>door</value>
  </data>
  <data name="Clone" xml:space="preserve">
    <value>Dupliceer</value>
  </data>
  <data name="Combinations" xml:space="preserve">
    <value>Combinaties</value>
  </data>
  <data name="Config" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Custom" xml:space="preserve">
    <value>Aanpassingen</value>
  </data>
  <data name="DataPool" xml:space="preserve">
    <value>gegevens pool</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Bewerk</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>Bestand</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Hoe werkt dit?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Dit is de %Taak Manager%, hier kunt u %nieuwe taken creëren%, %editen% of %bestaande taken% verwijderen en toegang krijgen tot de interface van een specifieke taak. Om een ​​nieuwe taak aan te maken, klik op de %Nieuw% knop hierboven. Nadat je een aantal taken hebt aangemaakt, kun je op deze pagina een overzicht van hun status zien. U kunt ook een taak aanmaken door een bestaande taak te dupliceren om tijd te besparen met alle config taken.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Om toegang te krijgen tot de interface van een specifieke taak, hoeft u er alleen maar op te klikken! Als u wilt dat de manager de status van uw taken minder vaak bijwerkt om bandbreedte te besparen, kunt u de optie  %Taak Manager update-interval% vinden op de pagina OB-instellingen.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="Infinite" xml:space="preserve">
    <value>Oneindig</value>
  </data>
  <data name="JobNotIdle" xml:space="preserve">
    <value>Baan niet inactief</value>
  </data>
  <data name="JobNotIdleWarning" xml:space="preserve">
    <value>Stop of breek de taak af voordat u deze verwijdert</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nieuw</value>
  </data>
  <data name="NoConfigSelected" xml:space="preserve">
    <value>Geen config geselecteerd</value>
  </data>
  <data name="NotWorking" xml:space="preserve">
    <value>Werkt niet</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Vooruitgang</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxy's</value>
  </data>
  <data name="Range" xml:space="preserve">
    <value>Bereik</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Verwijderen</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Verwijder alles</value>
  </data>
  <data name="SelectJobType" xml:space="preserve">
    <value>Selecteer het taak type</value>
  </data>
  <data name="ToCheck" xml:space="preserve">
    <value>Controleren</value>
  </data>
  <data name="Wordlist" xml:space="preserve">
    <value>Wordlist</value>
  </data>
  <data name="Working" xml:space="preserve">
    <value>Aan het werk</value>
  </data>
</root>