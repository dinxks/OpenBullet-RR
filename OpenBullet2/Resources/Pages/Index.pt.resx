<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticatedAs" xml:space="preserve">
    <value>Autenticado como</value>
  </data>
  <data name="BuildNumber" xml:space="preserve">
    <value>Número de compilação</value>
  </data>
  <data name="ClientIpAddress" xml:space="preserve">
    <value>Endereço IP do cliente</value>
  </data>
  <data name="CPUUsage" xml:space="preserve">
    <value>Utilização do CPU</value>
  </data>
  <data name="CurrentWorkingDirectory" xml:space="preserve">
    <value>Diretório de Trabalho Atual</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Ajuda</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Calorosas boas-vindas de Bulletta</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Olá e bem-vindo ao %OpenBullet 2%, sou %Bulletta% e serei seu guia por aqui. Procure os links de ajuda e irei explicar o que você precisar!</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Não vou mais te incomodar, acho que te vejo por aí então. Tchau!</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Onde todas as minhas configurações são salvas?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>Existem várias configurações no OpenBullet 2 e elas são salvas na pasta %UserData%. O %banco de dados% (por padrão SQLite) é o arquivo que contém seus proxies, jobs, hits, convidados e também mantém registros da localização de wordlists no disco. Por padrão chamado de %OpenBullet.db%. Suas %Configurações% ficam dentro da subpasta Configs, enquanto %Wordlists% que você importou através do recurso de upload do navegador ficam dentro da subpasta Wordlists. Consulte suas seções específicas para obter mais informações.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>As configurações OpenBullet e RuriLib são salvas em dois arquivos: %OpenBulletSettings.json% e %RuriLibSettings.json%. Esses arquivos são criados apenas se algumas alterações foram feitas na configuração padrão. O arquivo %Environment.ini% especifica o %Tipo da Wordlist%, %Status Customizados% e %Formatos de exportação% de seu ambiente OB2. Este é um arquivo muito importante, mais informações sobre os Tipos de listas de palavras podem ser encontradas em um guia separado.</value>
  </data>
  <data name="Help2x03" xml:space="preserve">
    <value>O arquivo %sharingEndpoints.json% contém as informações de seus endpoints para compartilhamento de configuração. Finalmente, o arquivo %triggeredActions.json% contém todas as %Ações disparadas% do seu Monitor de Trabalho. As ações disparadas são salvas automaticamente neste arquivo a cada 10 segundos.</value>
  </data>
  <data name="LocalTime" xml:space="preserve">
    <value>Horário local</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Sair</value>
  </data>
  <data name="MemoryUsage" xml:space="preserve">
    <value>Uso de memória</value>
  </data>
  <data name="NetworkUsage" xml:space="preserve">
    <value>Uso de rede</value>
  </data>
  <data name="OperatingSystem" xml:space="preserve">
    <value>Sistema operacional</value>
  </data>
  <data name="WebserverUptime" xml:space="preserve">
    <value>Tempo de atividade do servidor web</value>
  </data>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>Bem-vindo ao OpenBullet 2</value>
  </data>
</root>