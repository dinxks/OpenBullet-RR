<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Agregar</value>
  </data>
  <data name="AddBlank" xml:space="preserve">
    <value>Agregar en blanco</value>
  </data>
  <data name="AllowedProxyTypes" xml:space="preserve">
    <value>Tipos de proxy permitidos</value>
  </data>
  <data name="AllowedWordlistTypes" xml:space="preserve">
    <value>Tipos de Diccionarios permitidos</value>
  </data>
  <data name="AlwaysOpenBrowser" xml:space="preserve">
    <value>Abrir siempre el navegador al inicio</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>¿Estás seguro?</value>
  </data>
  <data name="BanLoopEvasion" xml:space="preserve">
    <value>Evasión de bucle de prohibición, también conocida como, después de cuántos estados desabilitados/BAN, los datos debe marcarse como A Verificar y el proxy debe desabilitarse (0 para deshabilitar)</value>
  </data>
  <data name="BanStatuses" xml:space="preserve">
    <value>Deshabilitar el proxy cuando el bot termina con uno de estos estados</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="CaseSensitive" xml:space="preserve">
    <value>Distinguir mayúsculas y minúsculas</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Limpiar</value>
  </data>
  <data name="ContinueStopStatuses" xml:space="preserve">
    <value>Estados para los que el bot continuará o se detendrá</value>
  </data>
  <data name="CPMLimit" xml:space="preserve">
    <value>CPM Limite (0 para no limite)</value>
  </data>
  <data name="CustomInputs" xml:space="preserve">
    <value>Entradas Personalizadas</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Datos</value>
  </data>
  <data name="DataRules" xml:space="preserve">
    <value>Reglas para Datos</value>
  </data>
  <data name="DefaultAnswer" xml:space="preserve">
    <value>Respuesta Predeterminada</value>
  </data>
  <data name="DisableWebpagesNotifications" xml:space="preserve">
    <value>Deshabilitar notificaciones de páginas web</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Headless" xml:space="preserve">
    <value>Oculto</value>
  </data>
  <data name="IgnoreHttpsErrors" xml:space="preserve">
    <value>Ignorar errores HTTPS</value>
  </data>
  <data name="IgnoreResponseErrors" xml:space="preserve">
    <value>Ignorar errores de respuesta</value>
  </data>
  <data name="InputDescription" xml:space="preserve">
    <value>Descripción (pregunta para el usuario)</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Entradas</value>
  </data>
  <data name="InputsDescription" xml:space="preserve">
    <value>Las entradas personalizadas son una forma de definir algunos valores directamente en tiempo de ejecución. Los usuarios de la configuración recibirán algunas ventanas emergentes cuando inicien un trabajo y su respuesta se insertará como una variable de tipo texto que puede usar como desee.</value>
  </data>
  <data name="Invert" xml:space="preserve">
    <value>Invertir</value>
  </data>
  <data name="MaxUsesPerProxy" xml:space="preserve">
    <value>Usos máximos por proxy (0 es infinito)</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxis</value>
  </data>
  <data name="Puppeteer" xml:space="preserve">
    <value>Puppeteer</value>
  </data>
  <data name="PuppeteerCommandLineArguments" xml:space="preserve">
    <value>Argumentos de la línea de comando (por ejemplo, --disable-Notifications --incognito)</value>
  </data>
  <data name="PuppeteerUserAgent" xml:space="preserve">
    <value>User Agent (por defecto si esta en blanco)</value>
  </data>
  <data name="QuitBrowserStatuses" xml:space="preserve">
    <value>Salir del navegador cuando el bot termine con uno de estos estados</value>
  </data>
  <data name="RandomUserAgent" xml:space="preserve">
    <value>User Agent Aleatorio</value>
  </data>
  <data name="RegexRule" xml:space="preserve">
    <value>Regla para Regex</value>
  </data>
  <data name="RegexToMatch" xml:space="preserve">
    <value>Regex a coincidir</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remover</value>
  </data>
  <data name="Requests" xml:space="preserve">
    <value>Solicitud</value>
  </data>
  <data name="RestoreDefaults" xml:space="preserve">
    <value>Restaurar por defecto</value>
  </data>
  <data name="RestoreDefaultSettingsConfirmation" xml:space="preserve">
    <value>¿Quieres restaurar los ajustes predeterminados?</value>
  </data>
  <data name="SaveEmptyCaptures" xml:space="preserve">
    <value>Guardar también capturas vacías</value>
  </data>
  <data name="SimpleRule" xml:space="preserve">
    <value>Regla simple</value>
  </data>
  <data name="SliceName" xml:space="preserve">
    <value>Nombre separado</value>
  </data>
  <data name="SuggestedBots" xml:space="preserve">
    <value>Cantidad de bots sugerida</value>
  </data>
  <data name="ToggleRegexHelper" xml:space="preserve">
    <value>Vista para ayuda Regex</value>
  </data>
  <data name="UrlEncodeAfterSlicing" xml:space="preserve">
    <value>Codificar la URL después de separada</value>
  </data>
  <data name="UseProxies" xml:space="preserve">
    <value>Usar proxis</value>
  </data>
  <data name="VariableName" xml:space="preserve">
    <value>Nombre de Variable</value>
  </data>
</root>