<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddConfig" xml:space="preserve">
    <value>Aggiungi config</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Sei sicuro/a?</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Autore</value>
  </data>
  <data name="CannotShareRemoteConfig" xml:space="preserve">
    <value>Non è possibile condividere una config remota</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Categoria</value>
  </data>
  <data name="ConfigRemovedSuccessfully" xml:space="preserve">
    <value>Config rimossa con successo</value>
  </data>
  <data name="ConfigsRemovedSuccessfully" xml:space="preserve">
    <value>Config rimosse con successo</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Creato</value>
  </data>
  <data name="CreateEndpoint" xml:space="preserve">
    <value>Crea endpoint</value>
  </data>
  <data name="CreationDate" xml:space="preserve">
    <value>Data di creazione</value>
  </data>
  <data name="DeleteEndpoint" xml:space="preserve">
    <value>Elimina endpoint</value>
  </data>
  <data name="EditEndpoint" xml:space="preserve">
    <value>Modifica endpoint</value>
  </data>
  <data name="Endpoint" xml:space="preserve">
    <value>Endpoint</value>
  </data>
  <data name="EndpointCreated" xml:space="preserve">
    <value>Endpoint creato</value>
  </data>
  <data name="ForThisEndpoint" xml:space="preserve">
    <value>Per questo endpoint</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Cos'è questo?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Qui è dove puoi impostare degli %endpoint% di condivisione per le tue config, in modo che altre persone vi possano accedere. Puoi %creare% endpoint e %aggiungere% config, e anche specificare le %Chiavi Api% che sono autorizzate a ricevere le config.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Per condividere le config con un amico, devi creare un endpoint, aggiungervi delle config, impostare almeno una chiave api e mandarla al tuo amico, assieme all'%URL% del tuo endpoint. Il tuo amico dovrà poi inserire questi dati nella sezione %Impostazioni OB &gt; Remoto%. Per esempio, se la tua istanza di OpenBullet 2 è raggiungibile su `1.1.1.1:5000` il tuo amico deve scrivere `http://1.1.1.1:5000/api/shared/configs/ROUTE` dove %ROUTE% è il nome che hai dato all'endpoint.</value>
  </data>
  <data name="LastModified" xml:space="preserve">
    <value>Ultima modifica</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Caricamento</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="NoConfigSelected" xml:space="preserve">
    <value>Nessuna config selezionata</value>
  </data>
  <data name="NoEndpointSelected" xml:space="preserve">
    <value>Nessun endpoint selezionato</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxy</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Vuoi davvero eliminare</value>
  </data>
  <data name="Remote" xml:space="preserve">
    <value>Remota</value>
  </data>
  <data name="RemoteConfig" xml:space="preserve">
    <value>Config remota</value>
  </data>
  <data name="RemoveAllConfigs" xml:space="preserve">
    <value>Rimuovi tutte le config</value>
  </data>
  <data name="RemoveConfig" xml:space="preserve">
    <value>Rimuovi config</value>
  </data>
  <data name="Removed" xml:space="preserve">
    <value>Rimossa/e</value>
  </data>
  <data name="SelectConfig" xml:space="preserve">
    <value>Seleziona config</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
</root>