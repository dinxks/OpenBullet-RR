<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllDone" xml:space="preserve">
    <value>Fatto!</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Sei sicuro/a?</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Autore</value>
  </data>
  <data name="by" xml:space="preserve">
    <value>di</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annulla</value>
  </data>
  <data name="CannotCloneRemoteConfig" xml:space="preserve">
    <value>Non è possibile clonare una config remota</value>
  </data>
  <data name="CannotDownloadRemoteConfig" xml:space="preserve">
    <value>Non è possibile scaricare una config remota</value>
  </data>
  <data name="CannotEditRemoteConfig" xml:space="preserve">
    <value>Non è possibile modificare una config remota</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Categoria</value>
  </data>
  <data name="Clone" xml:space="preserve">
    <value>Clona</value>
  </data>
  <data name="ConfigReloadWarning" xml:space="preserve">
    <value>Verranno ricaricate le config dal disco, tutte le modifiche non salvate saranno perse. Procedere?</value>
  </data>
  <data name="ConfigsSuccessfullyUploaded" xml:space="preserve">
    <value>Config caricate con successo</value>
  </data>
  <data name="ConfigWarningMessage" xml:space="preserve">
    <value>ATTENZIONE! Le config contengono codice C# che viene eseguito senza controlli automatici per individuare comportamenti sospetti. Se usi config fatte da terze parti, è TUA responsabilità assicurarti che le config facciano esattamente quello che dovrebbero e che non ci sia nulla di sospetto. Controlla sempre il LoliCode / Codice C# tu stesso prima di eseguirle se non ti fidi ciecamente dell'origine.</value>
  </data>
  <data name="CreationDate" xml:space="preserve">
    <value>Data di Creazione</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Elimina</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Scarica</value>
  </data>
  <data name="DownloadAll" xml:space="preserve">
    <value>Scarica Tutte</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Modifica</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Cos'è una config?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Una %Config% è un file che contiene istruzioni per automatizzare certe azioni, solitamente verso risorse web. Le config contengono %metadati% (come un nome, un autore e un'icona), un file %leggimi% con le istruzioni per usarla oppure una descrizione del suo utilizzo, alcune impostazioni, ed infine istruzioni che possono essere nel linguaggio di scripting %LoliCode% o in %C#% puro. Sul disco, le config vengono salvate come file con l'estensione %.opk% nella sottocartella %UserData/Configs%.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Le config possono essere usate in job come il %MultiRun Job% per eseguire alcune azioni in parallelo su un certo set di dati. Per esempio, possono essere usate per controllare se certi sottopercorsi di un certo sito web ritornano una risposta valida, oppure per copiare i link da più pagine di uno shop online.</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Come funziona il Config Manager?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>Il %Config Manager% tiene traccia di tutte le tue config. Le config vengono caricate dalla sottocartella `UserData/Configs` quando OB2 viene inizializzato, e se nuove config vengono aggiunte nella cartella puoi semplicemente premere il pulsante %Ricarica% per ricominciare il processo di caricamento. Se non hai accesso immediato alla cartella Configs (per esempio se OB2 viene eseguito in un server remoto) puoi %caricare% una config con il pulsante relativo. Puoi anche %scaricare% config esistenti con lo stesso procedimento.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>In cima puoi trovare il pulsante %Nuova% che creerà una nuova config. Per %modificare% una config puoi premere il pulsante Modifica oppure fare doppio click su una config della lista. C'è anche un pulsante per %cambiare la visuale% con una più dettagliata.</value>
  </data>
  <data name="Help3x00" xml:space="preserve">
    <value>Cos'è un file .opk?</value>
  </data>
  <data name="Help3x01" xml:space="preserve">
    <value>Un file %.opk% è un %archivio zip% contenente alcuni file. Il primo file è %metadata.json%, che contiene il nome, l'autore e l'icona della config. L'icona è un'immagine codificata in base64 che può anche essere una GIF. Il file %readme.md% conterrà una descrizione della config e verrà mostrato all'utente quando apre la config nel menu di selezione delle config durante la configurazione di un job. Supporta il linguaggio markdown. Il file %settings.json% conterrà le impostazioni specifiche della config.</value>
  </data>
  <data name="Help3x02" xml:space="preserve">
    <value>Infine, se la tua config utilizza stacker, le istruzioni saranno salvate come uno script LoliCode nel file %script.loli%. Se invece hai deciso di convertire la tua config in una config C#, verrà creato un file chiamato %script.cs% con il codice C# da eseguire.</value>
  </data>
  <data name="LastModified" xml:space="preserve">
    <value>Ultima Modifica</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Caricamento</value>
  </data>
  <data name="LocalConfigs" xml:space="preserve">
    <value>Config locali</value>
  </data>
  <data name="MissingPlugin" xml:space="preserve">
    <value>Plugin Mancante</value>
  </data>
  <data name="MissingPluginText" xml:space="preserve">
    <value>La config è stata costruita utilizzando questo plugin, ma risulta mancante</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nuova</value>
  </data>
  <data name="NoConfigSelectedWarning" xml:space="preserve">
    <value>Non hai selezionato alcuna config!</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxy</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Vuoi veramente cancellare</value>
  </data>
  <data name="Reload" xml:space="preserve">
    <value>Ricarica</value>
  </data>
  <data name="Remote" xml:space="preserve">
    <value>Remota</value>
  </data>
  <data name="RemoteConfig" xml:space="preserve">
    <value>Config remota</value>
  </data>
  <data name="RemoteConfigs" xml:space="preserve">
    <value>Config remote</value>
  </data>
  <data name="ToggleView" xml:space="preserve">
    <value>Cambia Visuale</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
  <data name="UnsavedChanges" xml:space="preserve">
    <value>Modifiche non salvate</value>
  </data>
  <data name="UnsavedChangesText" xml:space="preserve">
    <value>La config corrente ha modifiche non salvate, continuare comunque?</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Carica</value>
  </data>
  <data name="WARNING" xml:space="preserve">
    <value>ATTENZIONE</value>
  </data>
  <data name="Wordlists" xml:space="preserve">
    <value>Wordlist</value>
  </data>
</root>