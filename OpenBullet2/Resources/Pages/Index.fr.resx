<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticatedAs" xml:space="preserve">
    <value>Authentifié en tant que</value>
  </data>
  <data name="BuildNumber" xml:space="preserve">
    <value>Numéro de build</value>
  </data>
  <data name="ClientIpAddress" xml:space="preserve">
    <value>Adresse IP du client</value>
  </data>
  <data name="CPUUsage" xml:space="preserve">
    <value>Utilisation du CPU</value>
  </data>
  <data name="CurrentWorkingDirectory" xml:space="preserve">
    <value>Répertoire de travail actuel</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Aide</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Un accueil chaleureux de Bulletta</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Bonjour et bienvenue à %OpenBullet 2%, je suis %Bulletta% et je serai votre guide ici. Rechercher des boutons avec mon visage et je vais sauter sur l'écran pour expliquer ce que vous avez besoin!</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Je ne vais pas vous embêter plus longtemps, je suppose que vous regarderez les alentours. Byee!</value>
  </data>
  <data name="Help2x00" xml:space="preserve">
    <value>Où sont sauvegardés tous mes paramètres?</value>
  </data>
  <data name="Help2x01" xml:space="preserve">
    <value>There are plenty of settings in OpenBullet 2, and they are saved inside the %UserData% folder. The %database% (by default SQLite) is the file that contains your proxies, jobs, hits, guests and also holds records of the location of your wordlists on disk. By default it's called %OpenBullet.db%. %Configs% are inside the Configs subfolder, while %Wordlists% that you imported through the browser's upload feature are inside the Wordlists subfolder. Refer to their specific sections for more information.</value>
  </data>
  <data name="Help2x02" xml:space="preserve">
    <value>The OpenBullet and RuriLib settings are saved to two files: %OpenBulletSettings.json% and %RuriLibSettings.json%. These files are only created if some changes were made to the default configuration. The %Environment.ini% file specifies the %Wordlist Types%, %Custom Statuses% and %Export Formats% of your OB2 environment. This is a very important file, more information on Wordlists Types can be found in a separate guide.</value>
  </data>
  <data name="Help2x03" xml:space="preserve">
    <value>The %sharingEndpoints.json% file holds the information of your endpoints for config sharing. Finally, the %triggeredActions.json% file holds all the %Triggered Actions% of your Job Monitor. Triggered actions are automatically saved to this file every 10 seconds.</value>
  </data>
  <data name="LocalTime" xml:space="preserve">
    <value>Heure locale</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Se déconnecter</value>
  </data>
  <data name="MemoryUsage" xml:space="preserve">
    <value>Utilisation de la mémoire</value>
  </data>
  <data name="NetworkUsage" xml:space="preserve">
    <value>Utilisation du réseau</value>
  </data>
  <data name="OperatingSystem" xml:space="preserve">
    <value>Système d'exploitation</value>
  </data>
  <data name="WebserverUptime" xml:space="preserve">
    <value>Disponibilité du serveur</value>
  </data>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>Bienvenue dans OpenBullet 2</value>
  </data>
</root>
