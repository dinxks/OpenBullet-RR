<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Ajouter</value>
  </data>
  <data name="AddBlank" xml:space="preserve">
    <value>Ajouter une case vide</value>
  </data>
  <data name="AllowedProxyTypes" xml:space="preserve">
    <value>Types de proxy autorisés</value>
  </data>
  <data name="AllowedWordlistTypes" xml:space="preserve">
    <value>Types de wordlist autorisés</value>
  </data>
  <data name="AlwaysOpenBrowser" xml:space="preserve">
    <value>Toujours ouvrir le navigateur au démarrage</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Êtes-vous sûr?</value>
  </data>
  <data name="BanLoopEvasion" xml:space="preserve">
    <value>Évasion de la boucle de ban, en gros après combien de statuts BAN la ligne de data devrait être marquée comme TOCHECK et le proxy devrait être banni (0 pour désactiver)</value>
  </data>
  <data name="BanStatuses" xml:space="preserve">
    <value>Bannir le proxy quand le bot se termine avec un de ces statuts</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="CaseSensitive" xml:space="preserve">
    <value>Sensible à la CaSsE</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Vider</value>
  </data>
  <data name="ContinueStopStatuses" xml:space="preserve">
    <value>Statuts pour lesquels le bot continuera / s'arrêtera</value>
  </data>
  <data name="CPMLimit" xml:space="preserve">
    <value>Limite CPM (0 pour pas de limite)</value>
  </data>
  <data name="CustomInputs" xml:space="preserve">
    <value>Entrées custom</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Données</value>
  </data>
  <data name="DataRules" xml:space="preserve">
    <value>Règles de données</value>
  </data>
  <data name="DefaultAnswer" xml:space="preserve">
    <value>Réponse par défaut</value>
  </data>
  <data name="DisableWebpagesNotifications" xml:space="preserve">
    <value>Désactiver les notifications des pages web</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>Général</value>
  </data>
  <data name="Headless" xml:space="preserve">
    <value>Headless</value>
  </data>
  <data name="IgnoreHttpsErrors" xml:space="preserve">
    <value>Ignorer les erreurs HTTPS</value>
  </data>
  <data name="IgnoreResponseErrors" xml:space="preserve">
    <value>Ignorer les erreurs de réponse</value>
  </data>
  <data name="InputDescription" xml:space="preserve">
    <value>Description (question pour l'utilisateur)</value>
  </data>
  <data name="Inputs" xml:space="preserve">
    <value>Entrées</value>
  </data>
  <data name="InputsDescription" xml:space="preserve">
    <value>Les entrées custom permettent de définir certaines valeurs directement au moment de l'exécution. Les utilisateurs de la config recevront des popups lorsqu'ils démarreront un job et leur réponse sera insérée comme une variable de type string que vous pourrez utiliser à votre guise.</value>
  </data>
  <data name="Invert" xml:space="preserve">
    <value>Inverser</value>
  </data>
  <data name="MaxUsesPerProxy" xml:space="preserve">
    <value>Utilisations maximum par proxy (0 pour infini)</value>
  </data>
  <data name="Proxies" xml:space="preserve">
    <value>Proxys</value>
  </data>
  <data name="Puppeteer" xml:space="preserve">
    <value>Puppeteer</value>
  </data>
  <data name="PuppeteerCommandLineArguments" xml:space="preserve">
    <value>Arguments de lignes de commande (ex. : --disable-notifications --incognito)</value>
  </data>
  <data name="PuppeteerUserAgent" xml:space="preserve">
    <value>User Agent (défaut si vide)</value>
  </data>
  <data name="QuitBrowserStatuses" xml:space="preserve">
    <value>Quitte le navigateur quand le bot se termine avec un de ces statuts</value>
  </data>
  <data name="RandomUserAgent" xml:space="preserve">
    <value>User Agent aléatoire</value>
  </data>
  <data name="RegexRule" xml:space="preserve">
    <value>Règle regex</value>
  </data>
  <data name="RegexToMatch" xml:space="preserve">
    <value>Regex à faire correspondre</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="Requests" xml:space="preserve">
    <value>Requêtes</value>
  </data>
  <data name="RestoreDefaults" xml:space="preserve">
    <value>Réinitialiser les valeurs par défaut</value>
  </data>
  <data name="RestoreDefaultSettingsConfirmation" xml:space="preserve">
    <value>Voulez-vous restaurer les paramètres par défaut?</value>
  </data>
  <data name="SaveEmptyCaptures" xml:space="preserve">
    <value>Sauvegarder les captures vides également</value>
  </data>
  <data name="SimpleRule" xml:space="preserve">
    <value>Règle simple</value>
  </data>
  <data name="SliceName" xml:space="preserve">
    <value>Nom de la découpe</value>
  </data>
  <data name="SuggestedBots" xml:space="preserve">
    <value>Nombre suggéré de bots</value>
  </data>
  <data name="ToggleRegexHelper" xml:space="preserve">
    <value>Afficher l'aide regex</value>
  </data>
  <data name="UrlEncodeAfterSlicing" xml:space="preserve">
    <value>Encoder avec URLEncode après le découpage</value>
  </data>
  <data name="UseProxies" xml:space="preserve">
    <value>Utiliser des proxys</value>
  </data>
  <data name="VariableName" xml:space="preserve">
    <value>Nom de la variable</value>
  </data>
</root>
