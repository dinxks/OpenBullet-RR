<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddGroup" xml:space="preserve">
    <value>Ajouter un groupe</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>Tous</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Êtes-vous sûr?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Pays</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Créé</value>
  </data>
  <data name="CreateProxyGroup" xml:space="preserve">
    <value>Créer un groupe proxy</value>
  </data>
  <data name="DeleteAllProxies" xml:space="preserve">
    <value>Supprimer tous les proxys</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Supprimé</value>
  </data>
  <data name="DeleteGroup" xml:space="preserve">
    <value>Supprimer le groupe</value>
  </data>
  <data name="DeleteNotWorking" xml:space="preserve">
    <value>Supprimer proxys non fonctionnels</value>
  </data>
  <data name="DeleteSlow" xml:space="preserve">
    <value>Supprimer proxys trop lents</value>
  </data>
  <data name="DeleteUntested" xml:space="preserve">
    <value>Supprimer proxys non testés</value>
  </data>
  <data name="EditGroup" xml:space="preserve">
    <value>Modifier le groupe</value>
  </data>
  <data name="EditProxyGroup" xml:space="preserve">
    <value>Modifier le groupe de proxy</value>
  </data>
  <data name="ForThisGroup" xml:space="preserve">
    <value>Pour ce groupe</value>
  </data>
  <data name="GroupInUse" xml:space="preserve">
    <value>Groupe en cours d'utilisation</value>
  </data>
  <data name="GroupInUseWarning" xml:space="preserve">
    <value>Un job utilise actuellement ce groupe proxy. Veuillez arrêter et supprimer le job du gestionnaire et réessayer.</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Comment ça marche?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Ici, vous pouvez importer vos proxys dans plusieurs %groups%. Les groupes aident à organiser les proxys et vous donnent la possibilité d'utiliser différents proxys pour différents Jobs. Tout d'abord, vous devez créer un groupe en cliquant sur le bouton %Ajouter un groupe% ci-dessus. Donnez-lui simplement un nom. Assurez-vous que votre nouveau groupe est sélectionné, puis cliquez sur %Importer les proxys%.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Le menu %Importation de proxys% vous donnera 3 façons d'importer vos proxies. Vous pouvez soit %les coller%, %les télécharger% ou %renseigner l'URL% d'une ressource distante qui fournit des proxys au format texte (généralement un par ligne). Vous pouvez également spécifier les paramètres par défaut %type%, %username% et %password% pour les proxys. Vous pouvez également utiliser la %syntaxe avancée% décrite dans le formulaire afin de spécifier le type, le nom d'utilisateur et le mot de passe pour chaque proxy.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Vous êtes maintenant prêt et vous pourrez sélectionner votre groupe proxy lorsque vous créez ou modifiez un travail. Vous pouvez créer un job de type %Proxy Check% afin de tester si vos proxys fonctionnent avant de les utiliser. La tâche Proxy Check mettra à jour les champs %pays%, %statut%, %ping% et %dernière vérification% de vos proxys dans le tableau de données de cette page, de sorte que vous puissiez alors %supprimer% les proxys qui ne fonctionnent pas ou avoir un ping trop élevé pour vos besoins. Vous pouvez même décider de ne conserver que les mandataires d'un pays spécifique!</value>
  </data>
  <data name="Host" xml:space="preserve">
    <value>Hôte</value>
  </data>
  <data name="Imported" xml:space="preserve">
    <value>Importé</value>
  </data>
  <data name="ImportProxies" xml:space="preserve">
    <value>Importer des proxys</value>
  </data>
  <data name="LastChecked" xml:space="preserve">
    <value>Dernière vérification</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Chargement</value>
  </data>
  <data name="NoGroupSelected" xml:space="preserve">
    <value>Veuillez d'abord sélectionner un groupe</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Aucun enregistrement à afficher</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Mot de passe</value>
  </data>
  <data name="Ping" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="pingOver" xml:space="preserve">
    <value>pinger vers</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="ProxiesDeletedSuccessfully" xml:space="preserve">
    <value>Proxies supprimé avec succès</value>
  </data>
  <data name="ProxiesImportedSuccessfully" xml:space="preserve">
    <value>Proxies importées avec succès</value>
  </data>
  <data name="ProxyGroup" xml:space="preserve">
    <value>Groupe proxy</value>
  </data>
  <data name="ProxyGroupCreated" xml:space="preserve">
    <value>Le groupe proxy a été créé avec succès!</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Voulez-vous vraiment supprimer</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>résultats</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Résultats par page</value>
  </data>
  <data name="Slow" xml:space="preserve">
    <value>Lent</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Statut</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Oula</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Nom d'utilisateur</value>
  </data>
</root>
