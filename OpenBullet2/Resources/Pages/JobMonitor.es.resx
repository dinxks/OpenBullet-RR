<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Acciones</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Ejecutar secuencialmente</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Activa</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Proxis activos</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Proxis bloqueados</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Bans</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Credito Captcha</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Personalizado</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>dias</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Editar Accion</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Editar activador</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errores</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>Ejecutando</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Ejecuciones</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Fallidos</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>¿Cómo funciona esto?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Este es el %Monitor de Tareas%, que contiene una lista de %acciones activadas%. Las acciones desencadenadas se encargan de monitorear una tarea, verifican los activadores y ejecutan acciones. En primer lugar, debe definir el %id% de la tarea a supervisar en el cuadro de texto numérico. Recuerde desmarcar la casilla de verificación %activar% al configurar los activadores y acciones para evitar que se ejecuten accidentalmente cuando aún no haya terminado con ellos.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Luego, debe agregar algunos %activadores% y %acciones%. Una vez que se cumplan todas las condiciones de activación, el Monitor de tareas ejecutará todas las %acciones% que especificó en un orden secuencial hasta que se agoten. Después de ejecutar las acciones, el contador de %ejecuciones% aumentará. Si la acción activada está marcada como %repetible%, los activadores coincidirán varias veces; de lo contrario, la acción activada se establecerá como inactiva y no se activará nunca más.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>El botón % Restablecer% restablecerá el número de ejecuciones a 0. Las acciones activadas se guardan en el archivo %triggeredActions.json%, por lo que si desea realizar una copia de seguridad de ellas o transferirlas a otra instancia de OB, debe copiar este archivo.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>horas</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>en Tarea</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Tarea</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Tarea finalizada</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Estado de Tarea</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minutos</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nuevo</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>en webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progreso</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Recargar proxis</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remover</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Remover Todos</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Repetible</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Restablecer</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Reintentos</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>segundos</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Seleccionar tipo de acción</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Seleccionar tipo de activador</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Enviar</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Establecer bots para</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Establecer tiempo relativo para</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Empesar Tarea</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Detener Tarea</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Provados</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Tiempo transcurrido</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Tiempo restante</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>A Verificar</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Activador</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Todos deben ser verificados al mismo tiempo.</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Esperar</value>
  </data>
</root>