<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Aggiungi</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Aggiunta</value>
  </data>
  <data name="AddedWordlist" xml:space="preserve">
    <value>La wordlist è stata aggiunta con successo!</value>
  </data>
  <data name="AddWordlist" xml:space="preserve">
    <value>Aggiungi wordlist</value>
  </data>
  <data name="AlsoDeleteFile" xml:space="preserve">
    <value>Rimuovere anche il file?</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Sei sicuro/a?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annulla</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Rimuovi</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Cancellate</value>
  </data>
  <data name="DeletedWordlists" xml:space="preserve">
    <value>Wordlist cancellate</value>
  </data>
  <data name="DeleteFileText1" xml:space="preserve">
    <value>Vuoi anche cancellare</value>
  </data>
  <data name="DeleteFileText2" xml:space="preserve">
    <value>dal disco?</value>
  </data>
  <data name="DeleteNotFound" xml:space="preserve">
    <value>Rimuovi non trovate</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Modifica</value>
  </data>
  <data name="EditWordlist" xml:space="preserve">
    <value>Modifica wordlist</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Nome File</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Come funziona?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Qui puoi importare le tue wordlist. Prima di tutto clicca sul pulsante %Aggiungi% qui sopra. Potrai specificare un %Tipo di wordlist% (più informazioni a seguire), un %Nome% e un %Utilizzo%. Hai due opzioni per caricare il tuo file. La prima opzione è fare l'%upload% sul server che sta eseguendo l'istanza di OpenBullet2. Questo è il metodo da preferire %se la wordlist è sul client% da cui accedi a OB2 tramite il browser, mentre OB2 viene hostato su una macchina diversa. Questo metodo di aggiungere una wordlist aggiunge un po' di ritardo perchè la wordlist deve essere caricata attraverso il browser.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>%Se la wordlist è sul server%, cioè se stai cercando di reperire un file nella stessa macchina che sta eseguendo OB2, puoi usare l'opzione %File System%, che ti permetterà di esplorare le cartelle in cerca del file desiderato. Nota che per accedere a posizioni sul disco che sono fuori dalla cartella di lavoro corrente, dovrai abilitare l'accesso ai file in tutto il sistema nelle opzioni di sicurezza di OB2.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>In quanto ai %Tipi di wordlist% (o Wordlist Types), troverai i Wordlist Types specificati al momento nel file %UserData/Environment.ini% nella cartella di OB2. I Wordlist Types sono caricati quando OB2 viene eseguito. Puoi cambiare questo file e aggiungere/rimuovere/modificare i Wordlist Types a seconda del formato delle tue wordlist. Puoi trovare più informazioni riguardo ai Wordlist Types nella sezione guide del forum ufficiale.</value>
  </data>
  <data name="KeepFile" xml:space="preserve">
    <value>No, mantieni il file</value>
  </data>
  <data name="Lines" xml:space="preserve">
    <value>Righe</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Caricamento</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="NoRecordsToDisplay" xml:space="preserve">
    <value>Nessuna wordlist trovata</value>
  </data>
  <data name="NoWordlistSelected" xml:space="preserve">
    <value>Devi prima selezionare una wordlist</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Proprietario</value>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>Ambito</value>
  </data>
  <data name="ReallyDelete" xml:space="preserve">
    <value>Vuoi davvero cancellare</value>
  </data>
  <data name="results" xml:space="preserve">
    <value>risultati</value>
  </data>
  <data name="ResultsPerPage" xml:space="preserve">
    <value>Risultati per pagina</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="Uh-Oh" xml:space="preserve">
    <value>Uh-Oh</value>
  </data>
</root>