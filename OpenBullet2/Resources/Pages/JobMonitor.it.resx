<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbortJob" xml:space="preserve">
    <value>Termina Job</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Azioni</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Eseguite in successione</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Attiva</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Proxy funzionanti</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Proxy bannati</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Ban</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Credito captcha</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>giorni</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Modifica Azione</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Modifica Condizione</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errori</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>In esecuzione</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Esecuzioni</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Non funzionanti</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Come funziona?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Questo è il %Job Monitor%, che contiene una lista di %Azioni Condizionate%. Il compito delle Azioni Condizionate è quello di monitorare un job, controllando le condizioni ed eseguendo delle azioni. Prima di tutto dovresti definire l'%id% del job da monitorare nella casella numerica. Ricordati di togliere la spunta dalla checkbox %attiva% mentre configuri le condizioni e le azioni per evitare che vengano eseguite accidentalmente.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Poi dovresti aggiungere delle %condizioni% e delle %azioni%. Quando tutte le condizioni sono vere, il Job Monitor eseguirà tutte le %azioni% che hai specificato in ordine sequenziale finchè non sono esaurite. Dopo aver eseguito le azioni, il contatore di %esecuzioni% sarà incrementato. Se l'Azione Condizionata è marcata come %ripetibile%, le azioni verranno eseguite ogni volta che le condizioni sono vere, altrimenti l'Azione Condizionata diverrà inattiva e non verrà più eseguita.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Il pulsante %Azzera% riporterà il numero di esecuzioni a 0. Le Azioni Condizionate sono salvate nel file %triggeredActions.json%, quindi se vuoi salvare una copia di backup o trasferirle ad un'altra istanza di OB puoi copiare quel file.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hit</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>ore</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>nel job</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Job terminato</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Stato del job</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minuti</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nuova</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>sul webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progresso</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Ricarica proxy</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Rimuovi</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Rimuovi Tutto</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Ripetibile</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Azzera</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Riprovati</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>secondi</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Seleziona tipo azione</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Seleziona tipo condizione</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Invia</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Imposta i bot a</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Imposta il tempo relativo a</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Inizia job</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Ferma job</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Testati</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Tempo trascorso</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Tempo rimanente</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>Da controllare</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Condizioni</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Devono essere vere tutte assieme</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Aspetta</value>
  </data>
</root>